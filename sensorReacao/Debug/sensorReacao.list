
sensorReacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000609c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800626c  0800626c  0000726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00007410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006418  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000006c  08006484  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08006484  000082c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f244  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a3  00000000  00000000  000172e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00019788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac0  00000000  00000000  0001a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023293  00000000  00000000  0001b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012518  00000000  00000000  0003e2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3027  00000000  00000000  000507cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001237f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  00123838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00127c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006254 	.word	0x08006254

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006254 	.word	0x08006254

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a47      	ldr	r2, [pc, #284]	@ (8000728 <MX_GPIO_Init+0x13c>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b45      	ldr	r3, [pc, #276]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b41      	ldr	r3, [pc, #260]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a40      	ldr	r2, [pc, #256]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b3e      	ldr	r3, [pc, #248]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a39      	ldr	r2, [pc, #228]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x13c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b33      	ldr	r3, [pc, #204]	@ (8000728 <MX_GPIO_Init+0x13c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a32      	ldr	r2, [pc, #200]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <MX_GPIO_Init+0x13c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	482d      	ldr	r0, [pc, #180]	@ (800072c <MX_GPIO_Init+0x140>)
 8000678:	f001 f9f4 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENSOR_Pin|LED_P1_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000682:	482b      	ldr	r0, [pc, #172]	@ (8000730 <MX_GPIO_Init+0x144>)
 8000684:	f001 f9ee 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_P2_GPIO_Port, LED_P2_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <MX_GPIO_Init+0x148>)
 8000690:	f001 f9e8 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800069a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4821      	ldr	r0, [pc, #132]	@ (8000730 <MX_GPIO_Init+0x144>)
 80006ac:	f001 f82e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b0:	2320      	movs	r3, #32
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4819      	ldr	r0, [pc, #100]	@ (800072c <MX_GPIO_Init+0x140>)
 80006c8:	f001 f820 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOT_START_Pin */
  GPIO_InitStruct.Pin = BOT_START_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOT_START_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <MX_GPIO_Init+0x144>)
 80006e0:	f001 f814 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENSOR_Pin LED_P1_Pin */
  GPIO_InitStruct.Pin = LED_SENSOR_Pin|LED_P1_Pin;
 80006e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_GPIO_Init+0x144>)
 80006fe:	f001 f805 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_P2_Pin */
  GPIO_InitStruct.Pin = LED_P2_Pin;
 8000702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_P2_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <MX_GPIO_Init+0x148>)
 800071c:	f000 fff6 	bl	800170c <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	40020800 	.word	0x40020800
 8000734:	40020400 	.word	0x40020400

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 800073c:	f000 fdac 	bl	8001298 <HAL_Init>
  SystemClock_Config();
 8000740:	f000 f824 	bl	800078c <SystemClock_Config>

  MX_GPIO_Init();
 8000744:	f7ff ff52 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000748:	f000 fd02 	bl	8001150 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800074c:	f000 fb3e 	bl	8000dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000750:	f000 fbbc 	bl	8000ecc <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  Send_UART_Message("Jogo Inicializado\r\n\n");
 8000754:	480b      	ldr	r0, [pc, #44]	@ (8000784 <main+0x4c>)
 8000756:	f000 f987 	bl	8000a68 <Send_UART_Message>
  /* USER CODE END 2 */

  while (1)
  {
      // Botão PC5 inicia teste (ativo baixo)
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET)
 800075a:	2120      	movs	r1, #32
 800075c:	480a      	ldr	r0, [pc, #40]	@ (8000788 <main+0x50>)
 800075e:	f001 f969 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f8      	bne.n	800075a <main+0x22>
      {
          HAL_Delay(50);
 8000768:	2032      	movs	r0, #50	@ 0x32
 800076a:	f000 fe07 	bl	800137c <HAL_Delay>
          while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET);
 800076e:	bf00      	nop
 8000770:	2120      	movs	r1, #32
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <main+0x50>)
 8000774:	f001 f95e 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <main+0x38>
          StartReactionTest();
 800077e:	f000 f989 	bl	8000a94 <StartReactionTest>
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET)
 8000782:	e7ea      	b.n	800075a <main+0x22>
 8000784:	0800626c 	.word	0x0800626c
 8000788:	40020800 	.word	0x40020800

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	@ 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fd0b 	bl	80051b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <SystemClock_Config+0xd4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a29      	ldr	r2, [pc, #164]	@ (8000860 <SystemClock_Config+0xd4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <SystemClock_Config+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d8:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <SystemClock_Config+0xd8>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <SystemClock_Config+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000800:	2310      	movs	r3, #16
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000804:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000808:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800080a:	2304      	movs	r3, #4
 800080c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fc86 	bl	800212c <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000826:	f000 f97d 	bl	8000b24 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f926 	bl	8001a98 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000852:	f000 f967 	bl	8000b24 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	@ 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

/* TIM2 Callback: acende LED central após delay aleatório */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && ubTestInProgress)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d119      	bne.n	80008ae <HAL_TIM_OC_DelayElapsedCallback+0x46>
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d014      	beq.n	80008ae <HAL_TIM_OC_DelayElapsedCallback+0x46>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // LED central ON
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088a:	480c      	ldr	r0, [pc, #48]	@ (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 800088c:	f001 f8ea 	bl	8001a64 <HAL_GPIO_WritePin>

        // Reinicia TIM3 do zero
        __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
        uwTick_LED_On = 0;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]

        // Inicia Input Capture para Player1 (CH1) e Player2 (CH2)
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800089e:	2100      	movs	r1, #0
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80008a2:	f002 f8f9 	bl	8002a98 <HAL_TIM_IC_Start_IT>
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80008a6:	2104      	movs	r1, #4
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80008aa:	f002 f8f5 	bl	8002a98 <HAL_TIM_IC_Start_IT>
    }
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000094 	.word	0x20000094
 80008bc:	40020800 	.word	0x40020800
 80008c0:	200000e4 	.word	0x200000e4
 80008c4:	20000088 	.word	0x20000088

080008c8 <HAL_TIM_IC_CaptureCallback>:

/* TIM3 Input Capture Callback: mede tempo de reação */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09e      	sub	sp, #120	@ 0x78
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && ubTestInProgress)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a55      	ldr	r2, [pc, #340]	@ (8000a2c <HAL_TIM_IC_CaptureCallback+0x164>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	f040 80a3 	bne.w	8000a22 <HAL_TIM_IC_CaptureCallback+0x15a>
 80008dc:	4b54      	ldr	r3, [pc, #336]	@ (8000a30 <HAL_TIM_IC_CaptureCallback+0x168>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f000 809d 	beq.w	8000a22 <HAL_TIM_IC_CaptureCallback+0x15a>
    {
        char msg[100];

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Player1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7f1b      	ldrb	r3, [r3, #28]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10f      	bne.n	8000910 <HAL_TIM_IC_CaptureCallback+0x48>
        {
            uint32_t ticks = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f002 fdb0 	bl	8003458 <HAL_TIM_ReadCapturedValue>
 80008f8:	6778      	str	r0, [r7, #116]	@ 0x74
            uwReactionTime_P1 = ticks / 10; // converte para ms
 80008fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80008fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000a34 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	4a4c      	ldr	r2, [pc, #304]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000906:	6013      	str	r3, [r2, #0]
            HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	484c      	ldr	r0, [pc, #304]	@ (8000a3c <HAL_TIM_IC_CaptureCallback+0x174>)
 800090c:	f002 f9ec 	bl	8002ce8 <HAL_TIM_IC_Stop_IT>
        }

        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // Player2
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d10f      	bne.n	8000938 <HAL_TIM_IC_CaptureCallback+0x70>
        {
            uint32_t ticks = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f002 fd9c 	bl	8003458 <HAL_TIM_ReadCapturedValue>
 8000920:	6738      	str	r0, [r7, #112]	@ 0x70
            uwReactionTime_P2 = ticks / 10; // converte para ms
 8000922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000924:	4a43      	ldr	r2, [pc, #268]	@ (8000a34 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	4a44      	ldr	r2, [pc, #272]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 800092e:	6013      	str	r3, [r2, #0]
            HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000930:	2104      	movs	r1, #4
 8000932:	4842      	ldr	r0, [pc, #264]	@ (8000a3c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000934:	f002 f9d8 	bl	8002ce8 <HAL_TIM_IC_Stop_IT>
        }

        // Se ambos já reagiram
        if (uwReactionTime_P1 && uwReactionTime_P2)
 8000938:	4b3f      	ldr	r3, [pc, #252]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d070      	beq.n	8000a22 <HAL_TIM_IC_CaptureCallback+0x15a>
 8000940:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d06c      	beq.n	8000a22 <HAL_TIM_IC_CaptureCallback+0x15a>
        {
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // LED central OFF
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094e:	483d      	ldr	r0, [pc, #244]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000950:	f001 f888 	bl	8001a64 <HAL_GPIO_WritePin>

            sprintf(msg, "Player1: %lu ms\r\n", uwReactionTime_P1);
 8000954:	4b38      	ldr	r3, [pc, #224]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	493a      	ldr	r1, [pc, #232]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x180>)
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fbc4 	bl	80050ec <siprintf>
            Send_UART_Message(msg);
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f87d 	bl	8000a68 <Send_UART_Message>
            sprintf(msg, "Player2: %lu ms\r\n", uwReactionTime_P2);
 800096e:	4b34      	ldr	r3, [pc, #208]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4935      	ldr	r1, [pc, #212]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000978:	4618      	mov	r0, r3
 800097a:	f004 fbb7 	bl	80050ec <siprintf>
            Send_UART_Message(msg);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f870 	bl	8000a68 <Send_UART_Message>

            // Decide vencedor
            if (uwReactionTime_P1 < uwReactionTime_P2)
 8000988:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d209      	bcs.n	80009a8 <HAL_TIM_IC_CaptureCallback+0xe0>
            {
                Send_UART_Message("Vencedor: Player1\r\n");
 8000994:	482e      	ldr	r0, [pc, #184]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000996:	f000 f867 	bl	8000a68 <Send_UART_Message>
                HAL_GPIO_WritePin(GPIOC, LED_PLAYER1_Pin, GPIO_PIN_SET); // LED P1 ON
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a0:	4828      	ldr	r0, [pc, #160]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80009a2:	f001 f85f 	bl	8001a64 <HAL_GPIO_WritePin>
 80009a6:	e012      	b.n	80009ce <HAL_TIM_IC_CaptureCallback+0x106>
            }
            else if (uwReactionTime_P2 < uwReactionTime_P1)
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d209      	bcs.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x100>
            {
                Send_UART_Message("Vencedor: Player2\r\n");
 80009b4:	4827      	ldr	r0, [pc, #156]	@ (8000a54 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80009b6:	f000 f857 	bl	8000a68 <Send_UART_Message>
                HAL_GPIO_WritePin(GPIOB, LED_PLAYER2_Pin, GPIO_PIN_SET); // LED P2 ON
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c0:	4825      	ldr	r0, [pc, #148]	@ (8000a58 <HAL_TIM_IC_CaptureCallback+0x190>)
 80009c2:	f001 f84f 	bl	8001a64 <HAL_GPIO_WritePin>
 80009c6:	e002      	b.n	80009ce <HAL_TIM_IC_CaptureCallback+0x106>
            }
            else
            {
                Send_UART_Message("Empate!\r\n");
 80009c8:	4824      	ldr	r0, [pc, #144]	@ (8000a5c <HAL_TIM_IC_CaptureCallback+0x194>)
 80009ca:	f000 f84d 	bl	8000a68 <Send_UART_Message>
            }

            // Atualiza HighScore
            uint32_t menor = (uwReactionTime_P1 < uwReactionTime_P2) ? uwReactionTime_P1 : uwReactionTime_P2;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d202      	bcs.n	80009e0 <HAL_TIM_IC_CaptureCallback+0x118>
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	e001      	b.n	80009e4 <HAL_TIM_IC_CaptureCallback+0x11c>
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (menor < uwHighScore) uwHighScore = menor;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <HAL_TIM_IC_CaptureCallback+0x198>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d202      	bcs.n	80009f6 <HAL_TIM_IC_CaptureCallback+0x12e>
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <HAL_TIM_IC_CaptureCallback+0x198>)
 80009f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009f4:	6013      	str	r3, [r2, #0]
            sprintf(msg, "HighScore: %lu ms\r\n\n", uwHighScore);
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_TIM_IC_CaptureCallback+0x198>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4919      	ldr	r1, [pc, #100]	@ (8000a64 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fb73 	bl	80050ec <siprintf>
            Send_UART_Message(msg);
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f82c 	bl	8000a68 <Send_UART_Message>

            // Reinicia variáveis para o próximo teste
            uwReactionTime_P1 = 0;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
            uwReactionTime_P2 = 0;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
            ubTestInProgress = 0;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000a22:	bf00      	nop
 8000a24:	3778      	adds	r7, #120	@ 0x78
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000400 	.word	0x40000400
 8000a30:	20000094 	.word	0x20000094
 8000a34:	cccccccd 	.word	0xcccccccd
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	200000e4 	.word	0x200000e4
 8000a40:	20000090 	.word	0x20000090
 8000a44:	40020800 	.word	0x40020800
 8000a48:	08006284 	.word	0x08006284
 8000a4c:	08006298 	.word	0x08006298
 8000a50:	080062ac 	.word	0x080062ac
 8000a54:	080062c0 	.word	0x080062c0
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	080062d4 	.word	0x080062d4
 8000a60:	20000000 	.word	0x20000000
 8000a64:	080062e0 	.word	0x080062e0

08000a68 <Send_UART_Message>:

/* Função para enviar mensagem via UART */
void Send_UART_Message(char *message)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fbcd 	bl	8000210 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <Send_UART_Message+0x28>)
 8000a82:	f003 fa6b 	bl	8003f5c <HAL_UART_Transmit>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000012c 	.word	0x2000012c

08000a94 <StartReactionTest>:

/* Inicia o teste de reação */
void StartReactionTest(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
    if (ubTestInProgress == 0)
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <StartReactionTest+0x78>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d12f      	bne.n	8000b04 <StartReactionTest+0x70>
    {
        ubTestInProgress = 1;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <StartReactionTest+0x78>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
        Send_UART_Message("Inicio do Teste...\r\n");
 8000aaa:	4819      	ldr	r0, [pc, #100]	@ (8000b10 <StartReactionTest+0x7c>)
 8000aac:	f7ff ffdc 	bl	8000a68 <Send_UART_Message>

        // Apaga LEDs de vencedor
        HAL_GPIO_WritePin(GPIOC, LED_PLAYER1_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab6:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <StartReactionTest+0x80>)
 8000ab8:	f000 ffd4 	bl	8001a64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_PLAYER2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac2:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <StartReactionTest+0x84>)
 8000ac4:	f000 ffce 	bl	8001a64 <HAL_GPIO_WritePin>

        // Delay aleatório 1-5 s em ticks do TIM2 (0,1 ms/tick)
        uint32_t random_delay_ticks = (rand() % 40000) + 10000;
 8000ac8:	f004 fa10 	bl	8004eec <rand>
 8000acc:	4602      	mov	r2, r0
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <StartReactionTest+0x88>)
 8000ad0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad4:	1399      	asrs	r1, r3, #14
 8000ad6:	17d3      	asrs	r3, r2, #31
 8000ad8:	1acb      	subs	r3, r1, r3
 8000ada:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8000ade:	fb01 f303 	mul.w	r3, r1, r3
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000ae8:	3310      	adds	r3, #16
 8000aea:	607b      	str	r3, [r7, #4]

        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <StartReactionTest+0x8c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, random_delay_ticks);
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <StartReactionTest+0x8c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <StartReactionTest+0x8c>)
 8000b00:	f001 fe5a 	bl	80027b8 <HAL_TIM_OC_Start_IT>
    }
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000094 	.word	0x20000094
 8000b10:	080062f8 	.word	0x080062f8
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	68db8bad 	.word	0x68db8bad
 8000b20:	2000009c 	.word	0x2000009c

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f000 fcf8 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 fbb1 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM2_IRQHandler+0x10>)
 8000be6:	f002 f987 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000009c 	.word	0x2000009c

08000bf4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <TIM3_IRQHandler+0x10>)
 8000bfa:	f002 f97d 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000e4 	.word	0x200000e4

08000c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <USART2_IRQHandler+0x10>)
 8000c0e:	f003 fa31 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000012c 	.word	0x2000012c

08000c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_kill>:

int _kill(int pid, int sig)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c36:	f004 fb0d 	bl	8005254 <__errno>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2216      	movs	r2, #22
 8000c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_exit>:

void _exit (int status)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ffe7 	bl	8000c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c5e:	bf00      	nop
 8000c60:	e7fd      	b.n	8000c5e <_exit+0x12>

08000c62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e00a      	b.n	8000c8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c74:	f3af 8000 	nop.w
 8000c78:	4601      	mov	r1, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	60ba      	str	r2, [r7, #8]
 8000c80:	b2ca      	uxtb	r2, r1
 8000c82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbf0      	blt.n	8000c74 <_read+0x12>
  }

  return len;
 8000c92:	687b      	ldr	r3, [r7, #4]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e009      	b.n	8000cc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	60ba      	str	r2, [r7, #8]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dbf1      	blt.n	8000cae <_write+0x12>
  }
  return len;
 8000cca:	687b      	ldr	r3, [r7, #4]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_close>:

int _close(int file)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_isatty>:

int _isatty(int file)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f004 fa72 	bl	8005254 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20020000 	.word	0x20020000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	20000098 	.word	0x20000098
 8000da4:	200002c8 	.word	0x200002c8

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000e04:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e06:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e26:	4828      	ldr	r0, [pc, #160]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e28:	f001 fc1e 	bl	8002668 <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f7ff fe77 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4821      	ldr	r0, [pc, #132]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e44:	f002 fa40 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e4e:	f7ff fe69 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e52:	481d      	ldr	r0, [pc, #116]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e54:	f001 fc57 	bl	8002706 <HAL_TIM_OC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e5e:	f7ff fe61 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e62:	2108      	movs	r1, #8
 8000e64:	4818      	ldr	r0, [pc, #96]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e66:	f001 ffed 	bl	8002e44 <HAL_TIM_OnePulse_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000e70:	f7ff fe58 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4619      	mov	r1, r3
 8000e82:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000e84:	f002 ff8a 	bl	8003d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000e8e:	f7ff fe49 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e92:	2330      	movs	r3, #48	@ 0x30
 8000e94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000eaa:	f002 f915 	bl	80030d8 <HAL_TIM_OC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000eb4:	f7ff fe36 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MX_TIM2_Init+0xfc>)
 8000eba:	f000 f911 	bl	80010e0 <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	@ 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000009c 	.word	0x2000009c

08000ecc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000ef8:	4a32      	ldr	r2, [pc, #200]	@ (8000fc4 <MX_TIM3_Init+0xf8>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000efe:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1e:	4828      	ldr	r0, [pc, #160]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f20:	f001 fba2 	bl	8002668 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000f2a:	f7ff fdfb 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4821      	ldr	r0, [pc, #132]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f3c:	f002 f9c4 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f46:	f7ff fded 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f4a:	481d      	ldr	r0, [pc, #116]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f4c:	f001 fd4a 	bl	80029e4 <HAL_TIM_IC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f56:	f7ff fde5 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f6a:	f002 ff17 	bl	8003d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000f74:	f7ff fdd6 	bl	8000b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 8000f84:	2308      	movs	r3, #8
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000f90:	f002 f8fe 	bl	8003190 <HAL_TIM_IC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000f9a:	f7ff fdc3 	bl	8000b24 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_TIM3_Init+0xf4>)
 8000faa:	f002 f8f1 	bl	8003190 <HAL_TIM_IC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000fb4:	f7ff fdb6 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000e4 	.word	0x200000e4
 8000fc4:	40000400 	.word	0x40000400

08000fc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe8:	d116      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a37      	ldr	r2, [pc, #220]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b35      	ldr	r3, [pc, #212]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201c      	movs	r0, #28
 800100c:	f000 fab5 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001010:	201c      	movs	r0, #28
 8001012:	f000 face 	bl	80015b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001016:	e056      	b.n	80010c6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2d      	ldr	r2, [pc, #180]	@ (80010d4 <HAL_TIM_Base_MspInit+0x10c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d151      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a29      	ldr	r2, [pc, #164]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_TIM_Base_MspInit+0x108>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PLAYER2_Pin;
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001086:	2302      	movs	r3, #2
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PLAYER2_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <HAL_TIM_Base_MspInit+0x110>)
 8001092:	f000 fb3b 	bl	800170c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PLAYER1_Pin;
 8001096:	2340      	movs	r3, #64	@ 0x40
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PLAYER1_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	480a      	ldr	r0, [pc, #40]	@ (80010dc <HAL_TIM_Base_MspInit+0x114>)
 80010b2:	f000 fb2b 	bl	800170c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	201d      	movs	r0, #29
 80010bc:	f000 fa5d 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c0:	201d      	movs	r0, #29
 80010c2:	f000 fa76 	bl	80015b2 <HAL_NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3730      	adds	r7, #48	@ 0x30
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40000400 	.word	0x40000400
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020800 	.word	0x40020800

080010e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001100:	d11d      	bne.n	800113e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_TIM_MspPostInit+0x68>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <HAL_TIM_MspPostInit+0x68>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_TIM_MspPostInit+0x68>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800111e:	2301      	movs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112e:	2301      	movs	r3, #1
 8001130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <HAL_TIM_MspPostInit+0x6c>)
 800113a:	f000 fae7 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <MX_USART2_UART_Init+0x50>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_USART2_UART_Init+0x4c>)
 8001188:	f002 fe98 	bl	8003ebc <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001192:	f7ff fcc7 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000012c 	.word	0x2000012c
 80011a0:	40004400 	.word	0x40004400

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <HAL_UART_MspInit+0x94>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d133      	bne.n	800122e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a14      	ldr	r2, [pc, #80]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011fe:	230c      	movs	r3, #12
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120e:	2307      	movs	r3, #7
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <HAL_UART_MspInit+0x9c>)
 800121a:	f000 fa77 	bl	800170c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2026      	movs	r0, #38	@ 0x26
 8001224:	f000 f9a9 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001228:	2026      	movs	r0, #38	@ 0x26
 800122a:	f000 f9c2 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004400 	.word	0x40004400
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800127c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001248:	f7ff fdae 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124e:	490d      	ldr	r1, [pc, #52]	@ (8001284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001264:	4c0a      	ldr	r4, [pc, #40]	@ (8001290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001272:	f003 fff5 	bl	8005260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fa5f 	bl	8000738 <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001288:	08006418 	.word	0x08006418
  ldr r2, =_sbss
 800128c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001290:	200002c4 	.word	0x200002c4

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	@ (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f94f 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fc30 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f967 	bl	80015ce <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f92f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000004 	.word	0x20000004
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20000008 	.word	0x20000008

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000000c 	.word	0x2000000c
 8001360:	20000174 	.word	0x20000174

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000174 	.word	0x20000174

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	@ (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	@ (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff3e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff31 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff feb6 	bl	8001364 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d008      	beq.n	8001618 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e052      	b.n	80016be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0216 	bic.w	r2, r2, #22
 8001626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001636:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <HAL_DMA_Abort+0x62>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0208 	bic.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001668:	e013      	b.n	8001692 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166a:	f7ff fe7b 	bl	8001364 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b05      	cmp	r3, #5
 8001676:	d90c      	bls.n	8001692 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e015      	b.n	80016be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e4      	bne.n	800166a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a4:	223f      	movs	r2, #63	@ 0x3f
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d004      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2280      	movs	r2, #128	@ 0x80
 80016de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e00c      	b.n	80016fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2205      	movs	r2, #5
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e165      	b.n	80019f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8154 	bne.w	80019ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80ae 	beq.w	80019ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a58      	ldr	r2, [pc, #352]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a14 <HAL_GPIO_Init+0x308>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d025      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_GPIO_Init+0x30c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01f      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a1c <HAL_GPIO_Init+0x310>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x212>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001a20 <HAL_GPIO_Init+0x314>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a24 <HAL_GPIO_Init+0x318>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x20a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001a28 <HAL_GPIO_Init+0x31c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x206>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	@ (8001a2c <HAL_GPIO_Init+0x320>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x202>
 800190a:	2306      	movs	r3, #6
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800190e:	2307      	movs	r3, #7
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019be:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e8:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f ae96 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e001      	b.n	8001a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0cc      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d90c      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a58      	ldr	r2, [pc, #352]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001af6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a52      	ldr	r2, [pc, #328]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d044      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d119      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b3f      	ldr	r3, [pc, #252]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3b      	ldr	r3, [pc, #236]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e067      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4934      	ldr	r1, [pc, #208]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff fbec 	bl	8001364 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff fbe8 	bl	8001364 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e04f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d20c      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f855 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	@ (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fb4c 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08006310 	.word	0x08006310
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	20000008 	.word	0x20000008

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08006320 	.word	0x08006320

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08006320 	.word	0x08006320

08001ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd0:	b0ae      	sub	sp, #184	@ 0xb8
 8001cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf2:	4bcb      	ldr	r3, [pc, #812]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	f200 8206 	bhi.w	800210c <HAL_RCC_GetSysClockFreq+0x440>
 8001d00:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d3d 	.word	0x08001d3d
 8001d0c:	0800210d 	.word	0x0800210d
 8001d10:	0800210d 	.word	0x0800210d
 8001d14:	0800210d 	.word	0x0800210d
 8001d18:	08001d45 	.word	0x08001d45
 8001d1c:	0800210d 	.word	0x0800210d
 8001d20:	0800210d 	.word	0x0800210d
 8001d24:	0800210d 	.word	0x0800210d
 8001d28:	08001d4d 	.word	0x08001d4d
 8001d2c:	0800210d 	.word	0x0800210d
 8001d30:	0800210d 	.word	0x0800210d
 8001d34:	0800210d 	.word	0x0800210d
 8001d38:	08001f3d 	.word	0x08001f3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4bb9      	ldr	r3, [pc, #740]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d42:	e1e7      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d44:	4bb8      	ldr	r3, [pc, #736]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d4a:	e1e3      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d4c:	4bb4      	ldr	r3, [pc, #720]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d58:	4bb1      	ldr	r3, [pc, #708]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d071      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d64:	4bae      	ldr	r3, [pc, #696]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d70:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	0159      	lsls	r1, r3, #5
 8001d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9c:	0150      	lsls	r0, r2, #5
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4621      	mov	r1, r4
 8001da4:	1a51      	subs	r1, r2, r1
 8001da6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001da8:	4629      	mov	r1, r5
 8001daa:	eb63 0301 	sbc.w	r3, r3, r1
 8001dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	018b      	lsls	r3, r1, #6
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	018a      	lsls	r2, r1, #6
 8001dca:	4641      	mov	r1, r8
 8001dcc:	1a51      	subs	r1, r2, r1
 8001dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001de4:	4649      	mov	r1, r9
 8001de6:	00cb      	lsls	r3, r1, #3
 8001de8:	4641      	mov	r1, r8
 8001dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dee:	4641      	mov	r1, r8
 8001df0:	00ca      	lsls	r2, r1, #3
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	4622      	mov	r2, r4
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dfe:	462b      	mov	r3, r5
 8001e00:	460a      	mov	r2, r1
 8001e02:	eb42 0303 	adc.w	r3, r2, r3
 8001e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e14:	4629      	mov	r1, r5
 8001e16:	024b      	lsls	r3, r1, #9
 8001e18:	4621      	mov	r1, r4
 8001e1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e1e:	4621      	mov	r1, r4
 8001e20:	024a      	lsls	r2, r1, #9
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e38:	f7fe fa42 	bl	80002c0 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e46:	e067      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e48:	4b75      	ldr	r3, [pc, #468]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e62:	2300      	movs	r3, #0
 8001e64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	0159      	lsls	r1, r3, #5
 8001e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7c:	0150      	lsls	r0, r2, #5
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4621      	mov	r1, r4
 8001e84:	1a51      	subs	r1, r2, r1
 8001e86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e88:	4629      	mov	r1, r5
 8001e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	018b      	lsls	r3, r1, #6
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	018a      	lsls	r2, r1, #6
 8001eaa:	4641      	mov	r1, r8
 8001eac:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ec2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eca:	4692      	mov	sl, r2
 8001ecc:	469b      	mov	fp, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	462b      	mov	r3, r5
 8001ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eea:	4629      	mov	r1, r5
 8001eec:	028b      	lsls	r3, r1, #10
 8001eee:	4621      	mov	r1, r4
 8001ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	028a      	lsls	r2, r1, #10
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f00:	2200      	movs	r2, #0
 8001f02:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f04:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f0a:	f7fe f9d9 	bl	80002c0 <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4613      	mov	r3, r2
 8001f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f18:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f3a:	e0eb      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f3c:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f48:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d06b      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f54:	4b32      	ldr	r3, [pc, #200]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f68:	2300      	movs	r3, #0
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f70:	4622      	mov	r2, r4
 8001f72:	462b      	mov	r3, r5
 8001f74:	f04f 0000 	mov.w	r0, #0
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	0159      	lsls	r1, r3, #5
 8001f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f82:	0150      	lsls	r0, r2, #5
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4621      	mov	r1, r4
 8001f8a:	1a51      	subs	r1, r2, r1
 8001f8c:	61b9      	str	r1, [r7, #24]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	eb63 0301 	sbc.w	r3, r3, r1
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001fa2:	4659      	mov	r1, fp
 8001fa4:	018b      	lsls	r3, r1, #6
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fac:	4651      	mov	r1, sl
 8001fae:	018a      	lsls	r2, r1, #6
 8001fb0:	4651      	mov	r1, sl
 8001fb2:	ebb2 0801 	subs.w	r8, r2, r1
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	eb63 0901 	sbc.w	r9, r3, r1
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fd0:	4690      	mov	r8, r2
 8001fd2:	4699      	mov	r9, r3
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	eb18 0303 	adds.w	r3, r8, r3
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	462b      	mov	r3, r5
 8001fde:	eb49 0303 	adc.w	r3, r9, r3
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	024b      	lsls	r3, r1, #9
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	024a      	lsls	r2, r1, #9
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002006:	2200      	movs	r2, #0
 8002008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800200a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800200c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002010:	f7fe f956 	bl	80002c0 <__aeabi_uldivmod>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4613      	mov	r3, r2
 800201a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800201e:	e065      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x420>
 8002020:	40023800 	.word	0x40023800
 8002024:	00f42400 	.word	0x00f42400
 8002028:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x458>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	2200      	movs	r2, #0
 8002034:	4618      	mov	r0, r3
 8002036:	4611      	mov	r1, r2
 8002038:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800203c:	653b      	str	r3, [r7, #80]	@ 0x50
 800203e:	2300      	movs	r3, #0
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
 8002042:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002046:	4642      	mov	r2, r8
 8002048:	464b      	mov	r3, r9
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	0159      	lsls	r1, r3, #5
 8002054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002058:	0150      	lsls	r0, r2, #5
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4641      	mov	r1, r8
 8002060:	1a51      	subs	r1, r2, r1
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	4649      	mov	r1, r9
 8002066:	eb63 0301 	sbc.w	r3, r3, r1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002078:	4659      	mov	r1, fp
 800207a:	018b      	lsls	r3, r1, #6
 800207c:	4651      	mov	r1, sl
 800207e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002082:	4651      	mov	r1, sl
 8002084:	018a      	lsls	r2, r1, #6
 8002086:	4651      	mov	r1, sl
 8002088:	1a54      	subs	r4, r2, r1
 800208a:	4659      	mov	r1, fp
 800208c:	eb63 0501 	sbc.w	r5, r3, r1
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	00eb      	lsls	r3, r5, #3
 800209a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800209e:	00e2      	lsls	r2, r4, #3
 80020a0:	4614      	mov	r4, r2
 80020a2:	461d      	mov	r5, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	18e3      	adds	r3, r4, r3
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	464b      	mov	r3, r9
 80020ac:	eb45 0303 	adc.w	r3, r5, r3
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020be:	4629      	mov	r1, r5
 80020c0:	028b      	lsls	r3, r1, #10
 80020c2:	4621      	mov	r1, r4
 80020c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c8:	4621      	mov	r1, r4
 80020ca:	028a      	lsls	r2, r1, #10
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020d4:	2200      	movs	r2, #0
 80020d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80020da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020de:	f7fe f8ef 	bl	80002c0 <__aeabi_uldivmod>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4613      	mov	r3, r2
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0f1b      	lsrs	r3, r3, #28
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80020fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800210a:	e003      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x45c>)
 800210e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002118:	4618      	mov	r0, r3
 800211a:	37b8      	adds	r7, #184	@ 0xb8
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400

0800212c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e28d      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8083 	beq.w	8002252 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800214c:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d019      	beq.n	800218c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002158:	4b91      	ldr	r3, [pc, #580]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002160:	2b08      	cmp	r3, #8
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002164:	4b8e      	ldr	r3, [pc, #568]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002170:	d00c      	beq.n	800218c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b8b      	ldr	r3, [pc, #556]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d112      	bne.n	80021a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800218a:	d10b      	bne.n	80021a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	4b84      	ldr	r3, [pc, #528]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d05b      	beq.n	8002250 <HAL_RCC_OscConfig+0x124>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d157      	bne.n	8002250 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e25a      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x90>
 80021ae:	4b7c      	ldr	r3, [pc, #496]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7b      	ldr	r2, [pc, #492]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e01d      	b.n	80021f8 <HAL_RCC_OscConfig+0xcc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0xb4>
 80021c6:	4b76      	ldr	r3, [pc, #472]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a75      	ldr	r2, [pc, #468]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b73      	ldr	r3, [pc, #460]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a72      	ldr	r2, [pc, #456]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0xcc>
 80021e0:	4b6f      	ldr	r3, [pc, #444]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6e      	ldr	r2, [pc, #440]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b6c      	ldr	r3, [pc, #432]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6b      	ldr	r2, [pc, #428]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80021f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f8b0 	bl	8001364 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff f8ac 	bl	8001364 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	@ 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e21f      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b61      	ldr	r3, [pc, #388]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0xdc>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f89c 	bl	8001364 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff f898 	bl	8001364 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	@ 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e20b      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	4b57      	ldr	r3, [pc, #348]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x104>
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06f      	beq.n	800233e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800225e:	4b50      	ldr	r3, [pc, #320]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b00      	cmp	r3, #0
 8002268:	d017      	beq.n	800229a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800226a:	4b4d      	ldr	r3, [pc, #308]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002272:	2b08      	cmp	r3, #8
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002276:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b41      	ldr	r3, [pc, #260]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x186>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1d3      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_RCC_OscConfig+0x278>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff f845 	bl	8001364 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff f841 	bl	8001364 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1b4      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4925      	ldr	r1, [pc, #148]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x278>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f824 	bl	8001364 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff f820 	bl	8001364 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e193      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d036      	beq.n	80023b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_RCC_OscConfig+0x27c>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7ff f804 	bl	8001364 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff f800 	bl	8001364 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e173      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x234>
 800237e:	e01b      	b.n	80023b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_OscConfig+0x27c>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe ffed 	bl	8001364 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e00e      	b.n	80023ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe ffe9 	bl	8001364 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d907      	bls.n	80023ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e15c      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b8a      	ldr	r3, [pc, #552]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8097 	beq.w	80024f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b83      	ldr	r3, [pc, #524]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b7f      	ldr	r3, [pc, #508]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	4a7e      	ldr	r2, [pc, #504]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e6:	4b7c      	ldr	r3, [pc, #496]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b79      	ldr	r3, [pc, #484]	@ (80025dc <HAL_RCC_OscConfig+0x4b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b76      	ldr	r3, [pc, #472]	@ (80025dc <HAL_RCC_OscConfig+0x4b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x4b0>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7fe ffa9 	bl	8001364 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe ffa5 	bl	8001364 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e118      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b6c      	ldr	r3, [pc, #432]	@ (80025dc <HAL_RCC_OscConfig+0x4b0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x31e>
 800243c:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a65      	ldr	r2, [pc, #404]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x358>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x340>
 8002452:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	@ 0x70
 800245e:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	4a5d      	ldr	r2, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	@ 0x70
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x358>
 800246c:	4b5a      	ldr	r3, [pc, #360]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a59      	ldr	r2, [pc, #356]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
 8002478:	4b57      	ldr	r3, [pc, #348]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a56      	ldr	r2, [pc, #344]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe ff6a 	bl	8001364 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe ff66 	bl	8001364 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0d7      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ee      	beq.n	8002494 <HAL_RCC_OscConfig+0x368>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe ff54 	bl	8001364 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe ff50 	bl	8001364 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0c1      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	4b40      	ldr	r3, [pc, #256]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ee      	bne.n	80024c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	4a3a      	ldr	r2, [pc, #232]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80ad 	beq.w	8002658 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fe:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d145      	bne.n	800259e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <HAL_RCC_OscConfig+0x4b4>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ff24 	bl	8001364 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe ff20 	bl	8001364 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e093      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	491b      	ldr	r1, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x4b4>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fef5 	bl	8001364 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fef1 	bl	8001364 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e064      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x452>
 800259c:	e05c      	b.n	8002658 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x4b4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fede 	bl	8001364 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe feda 	bl	8001364 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e04d      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x480>
 80025ca:	e045      	b.n	8002658 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e040      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <HAL_RCC_OscConfig+0x538>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d030      	beq.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d129      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d122      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800261a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	4293      	cmp	r3, r2
 800261e:	d119      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d10f      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e041      	b.n	80026fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fc9a 	bl	8000fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 ff38 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e041      	b.n	800279c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f839 	bl	80027a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 fee9 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_TIM_OC_Start_IT+0x28>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e022      	b.n	8002826 <HAL_TIM_OC_Start_IT+0x6e>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d109      	bne.n	80027fa <HAL_TIM_OC_Start_IT+0x42>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	bf14      	ite	ne
 80027f2:	2301      	movne	r3, #1
 80027f4:	2300      	moveq	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	e015      	b.n	8002826 <HAL_TIM_OC_Start_IT+0x6e>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d109      	bne.n	8002814 <HAL_TIM_OC_Start_IT+0x5c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e008      	b.n	8002826 <HAL_TIM_OC_Start_IT+0x6e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0c7      	b.n	80029be <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <HAL_TIM_OC_Start_IT+0x86>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800283c:	e013      	b.n	8002866 <HAL_TIM_OC_Start_IT+0xae>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d104      	bne.n	800284e <HAL_TIM_OC_Start_IT+0x96>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800284c:	e00b      	b.n	8002866 <HAL_TIM_OC_Start_IT+0xae>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d104      	bne.n	800285e <HAL_TIM_OC_Start_IT+0xa6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800285c:	e003      	b.n	8002866 <HAL_TIM_OC_Start_IT+0xae>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d841      	bhi.n	80028f0 <HAL_TIM_OC_Start_IT+0x138>
 800286c:	a201      	add	r2, pc, #4	@ (adr r2, 8002874 <HAL_TIM_OC_Start_IT+0xbc>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	080028a9 	.word	0x080028a9
 8002878:	080028f1 	.word	0x080028f1
 800287c:	080028f1 	.word	0x080028f1
 8002880:	080028f1 	.word	0x080028f1
 8002884:	080028bb 	.word	0x080028bb
 8002888:	080028f1 	.word	0x080028f1
 800288c:	080028f1 	.word	0x080028f1
 8002890:	080028f1 	.word	0x080028f1
 8002894:	080028cd 	.word	0x080028cd
 8002898:	080028f1 	.word	0x080028f1
 800289c:	080028f1 	.word	0x080028f1
 80028a0:	080028f1 	.word	0x080028f1
 80028a4:	080028df 	.word	0x080028df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0202 	orr.w	r2, r2, #2
 80028b6:	60da      	str	r2, [r3, #12]
      break;
 80028b8:	e01d      	b.n	80028f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0204 	orr.w	r2, r2, #4
 80028c8:	60da      	str	r2, [r3, #12]
      break;
 80028ca:	e014      	b.n	80028f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0208 	orr.w	r2, r2, #8
 80028da:	60da      	str	r2, [r3, #12]
      break;
 80028dc:	e00b      	b.n	80028f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0210 	orr.w	r2, r2, #16
 80028ec:	60da      	str	r2, [r3, #12]
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d15f      	bne.n	80029bc <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fa23 	bl	8003d50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2e      	ldr	r2, [pc, #184]	@ (80029c8 <HAL_TIM_OC_Start_IT+0x210>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIM_OC_Start_IT+0x166>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <HAL_TIM_OC_Start_IT+0x214>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_TIM_OC_Start_IT+0x16a>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_TIM_OC_Start_IT+0x16c>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002936:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_TIM_OC_Start_IT+0x210>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d022      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294a:	d01d      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <HAL_TIM_OC_Start_IT+0x218>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d018      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_TIM_OC_Start_IT+0x21c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_TIM_OC_Start_IT+0x220>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <HAL_TIM_OC_Start_IT+0x214>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <HAL_TIM_OC_Start_IT+0x224>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x1d0>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_TIM_OC_Start_IT+0x228>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d010      	beq.n	80029bc <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e007      	b.n	80029bc <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e041      	b.n	8002a7a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f839 	bl	8002a82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f000 fd7a 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_IC_Start_IT+0x1e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e013      	b.n	8002ade <HAL_TIM_IC_Start_IT+0x46>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_IC_Start_IT+0x2e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e00b      	b.n	8002ade <HAL_TIM_IC_Start_IT+0x46>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_IC_Start_IT+0x3e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e003      	b.n	8002ade <HAL_TIM_IC_Start_IT+0x46>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_TIM_IC_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e013      	b.n	8002b18 <HAL_TIM_IC_Start_IT+0x80>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d104      	bne.n	8002b00 <HAL_TIM_IC_Start_IT+0x68>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e00b      	b.n	8002b18 <HAL_TIM_IC_Start_IT+0x80>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d104      	bne.n	8002b10 <HAL_TIM_IC_Start_IT+0x78>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e003      	b.n	8002b18 <HAL_TIM_IC_Start_IT+0x80>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b1a:	7bbb      	ldrb	r3, [r7, #14]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b20:	7b7b      	ldrb	r3, [r7, #13]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0cc      	b.n	8002cc4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_IC_Start_IT+0xa2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b38:	e013      	b.n	8002b62 <HAL_TIM_IC_Start_IT+0xca>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_IC_Start_IT+0xb2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_IC_Start_IT+0xca>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_IC_Start_IT+0xc2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b58:	e003      	b.n	8002b62 <HAL_TIM_IC_Start_IT+0xca>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_IC_Start_IT+0xda>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b70:	e013      	b.n	8002b9a <HAL_TIM_IC_Start_IT+0x102>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_IC_Start_IT+0xea>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b80:	e00b      	b.n	8002b9a <HAL_TIM_IC_Start_IT+0x102>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_IC_Start_IT+0xfa>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b90:	e003      	b.n	8002b9a <HAL_TIM_IC_Start_IT+0x102>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d841      	bhi.n	8002c24 <HAL_TIM_IC_Start_IT+0x18c>
 8002ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba8 <HAL_TIM_IC_Start_IT+0x110>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002c25 	.word	0x08002c25
 8002bb0:	08002c25 	.word	0x08002c25
 8002bb4:	08002c25 	.word	0x08002c25
 8002bb8:	08002bef 	.word	0x08002bef
 8002bbc:	08002c25 	.word	0x08002c25
 8002bc0:	08002c25 	.word	0x08002c25
 8002bc4:	08002c25 	.word	0x08002c25
 8002bc8:	08002c01 	.word	0x08002c01
 8002bcc:	08002c25 	.word	0x08002c25
 8002bd0:	08002c25 	.word	0x08002c25
 8002bd4:	08002c25 	.word	0x08002c25
 8002bd8:	08002c13 	.word	0x08002c13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0202 	orr.w	r2, r2, #2
 8002bea:	60da      	str	r2, [r3, #12]
      break;
 8002bec:	e01d      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0204 	orr.w	r2, r2, #4
 8002bfc:	60da      	str	r2, [r3, #12]
      break;
 8002bfe:	e014      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	60da      	str	r2, [r3, #12]
      break;
 8002c10:	e00b      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0210 	orr.w	r2, r2, #16
 8002c20:	60da      	str	r2, [r3, #12]
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d148      	bne.n	8002cc2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2201      	movs	r2, #1
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 f889 	bl	8003d50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a22      	ldr	r2, [pc, #136]	@ (8002ccc <HAL_TIM_IC_Start_IT+0x234>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c50:	d01d      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd0 <HAL_TIM_IC_Start_IT+0x238>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <HAL_TIM_IC_Start_IT+0x23c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd8 <HAL_TIM_IC_Start_IT+0x240>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	@ (8002cdc <HAL_TIM_IC_Start_IT+0x244>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <HAL_TIM_IC_Start_IT+0x248>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a16      	ldr	r2, [pc, #88]	@ (8002ce4 <HAL_TIM_IC_Start_IT+0x24c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d111      	bne.n	8002cb2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d010      	beq.n	8002cc2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb0:	e007      	b.n	8002cc2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	40010400 	.word	0x40010400
 8002ce0:	40014000 	.word	0x40014000
 8002ce4:	40001800 	.word	0x40001800

08002ce8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d841      	bhi.n	8002d80 <HAL_TIM_IC_Stop_IT+0x98>
 8002cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002d81 	.word	0x08002d81
 8002d0c:	08002d81 	.word	0x08002d81
 8002d10:	08002d81 	.word	0x08002d81
 8002d14:	08002d4b 	.word	0x08002d4b
 8002d18:	08002d81 	.word	0x08002d81
 8002d1c:	08002d81 	.word	0x08002d81
 8002d20:	08002d81 	.word	0x08002d81
 8002d24:	08002d5d 	.word	0x08002d5d
 8002d28:	08002d81 	.word	0x08002d81
 8002d2c:	08002d81 	.word	0x08002d81
 8002d30:	08002d81 	.word	0x08002d81
 8002d34:	08002d6f 	.word	0x08002d6f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0202 	bic.w	r2, r2, #2
 8002d46:	60da      	str	r2, [r3, #12]
      break;
 8002d48:	e01d      	b.n	8002d86 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	60da      	str	r2, [r3, #12]
      break;
 8002d5a:	e014      	b.n	8002d86 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0208 	bic.w	r2, r2, #8
 8002d6a:	60da      	str	r2, [r3, #12]
      break;
 8002d6c:	e00b      	b.n	8002d86 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0210 	bic.w	r2, r2, #16
 8002d7c:	60da      	str	r2, [r3, #12]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d156      	bne.n	8002e3a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ffdb 	bl	8003d50 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_TIM_IC_Stop_IT+0xe2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	f240 4344 	movw	r3, #1092	@ 0x444
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_TIM_IC_Stop_IT+0xe2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_IC_Stop_IT+0xf2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd8:	e013      	b.n	8002e02 <HAL_TIM_IC_Stop_IT+0x11a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_IC_Stop_IT+0x102>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de8:	e00b      	b.n	8002e02 <HAL_TIM_IC_Stop_IT+0x11a>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_IC_Stop_IT+0x112>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df8:	e003      	b.n	8002e02 <HAL_TIM_IC_Stop_IT+0x11a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_IC_Stop_IT+0x12a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e10:	e013      	b.n	8002e3a <HAL_TIM_IC_Stop_IT+0x152>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_IC_Stop_IT+0x13a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_IC_Stop_IT+0x152>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_IC_Stop_IT+0x14a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e30:	e003      	b.n	8002e3a <HAL_TIM_IC_Stop_IT+0x152>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e041      	b.n	8002edc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f839 	bl	8002ee4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 fb49 	bl	800351c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0202 	mvn.w	r2, #2
 8002f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fcc0 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fc8c 	bl	8000868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 facf 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d020      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0204 	mvn.w	r2, #4
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fc9a 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fc66 	bl	8000868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 faa9 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0208 	mvn.w	r2, #8
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fc74 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fc40 	bl	8000868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fa83 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d020      	beq.n	8003040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0210 	mvn.w	r2, #16
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2208      	movs	r2, #8
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fc4e 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fc1a 	bl	8000868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fa5d 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa3e 	bl	80034e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 ff10 	bl	8003ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa2e 	bl	8003508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0220 	mvn.w	r2, #32
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fee2 	bl	8003e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e048      	b.n	8003188 <HAL_TIM_OC_ConfigChannel+0xb0>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d839      	bhi.n	8003178 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003104:	a201      	add	r2, pc, #4	@ (adr r2, 800310c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003141 	.word	0x08003141
 8003110:	08003179 	.word	0x08003179
 8003114:	08003179 	.word	0x08003179
 8003118:	08003179 	.word	0x08003179
 800311c:	0800314f 	.word	0x0800314f
 8003120:	08003179 	.word	0x08003179
 8003124:	08003179 	.word	0x08003179
 8003128:	08003179 	.word	0x08003179
 800312c:	0800315d 	.word	0x0800315d
 8003130:	08003179 	.word	0x08003179
 8003134:	08003179 	.word	0x08003179
 8003138:	08003179 	.word	0x08003179
 800313c:	0800316b 	.word	0x0800316b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fa8e 	bl	8003668 <TIM_OC1_SetConfig>
      break;
 800314c:	e017      	b.n	800317e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 faf7 	bl	8003748 <TIM_OC2_SetConfig>
      break;
 800315a:	e010      	b.n	800317e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fb66 	bl	8003834 <TIM_OC3_SetConfig>
      break;
 8003168:	e009      	b.n	800317e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fbd3 	bl	800391c <TIM_OC4_SetConfig>
      break;
 8003176:	e002      	b.n	800317e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	75fb      	strb	r3, [r7, #23]
      break;
 800317c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e088      	b.n	80032c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80031cc:	f000 fbfc 	bl	80039c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 020c 	bic.w	r2, r2, #12
 80031de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6999      	ldr	r1, [r3, #24]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	e060      	b.n	80032b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d11c      	bne.n	8003234 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800320a:	f000 fc80 	bl	8003b0e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800321c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6999      	ldr	r1, [r3, #24]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	619a      	str	r2, [r3, #24]
 8003232:	e040      	b.n	80032b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11b      	bne.n	8003272 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800324a:	f000 fccd 	bl	8003be8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020c 	bic.w	r2, r2, #12
 800325c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	61da      	str	r2, [r3, #28]
 8003270:	e021      	b.n	80032b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d11c      	bne.n	80032b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003288:	f000 fcea 	bl	8003c60 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800329a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69d9      	ldr	r1, [r3, #28]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	021a      	lsls	r2, r3, #8
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]
 80032b0:	e001      	b.n	80032b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_ConfigClockSource+0x1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0b4      	b.n	800344e <HAL_TIM_ConfigClockSource+0x186>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800330a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800331c:	d03e      	beq.n	800339c <HAL_TIM_ConfigClockSource+0xd4>
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003322:	f200 8087 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800332a:	f000 8086 	beq.w	800343a <HAL_TIM_ConfigClockSource+0x172>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003332:	d87f      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b70      	cmp	r3, #112	@ 0x70
 8003336:	d01a      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xa6>
 8003338:	2b70      	cmp	r3, #112	@ 0x70
 800333a:	d87b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b60      	cmp	r3, #96	@ 0x60
 800333e:	d050      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003340:	2b60      	cmp	r3, #96	@ 0x60
 8003342:	d877      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b50      	cmp	r3, #80	@ 0x50
 8003346:	d03c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003348:	2b50      	cmp	r3, #80	@ 0x50
 800334a:	d873      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d058      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x13a>
 8003350:	2b40      	cmp	r3, #64	@ 0x40
 8003352:	d86f      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b30      	cmp	r3, #48	@ 0x30
 8003356:	d064      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	2b30      	cmp	r3, #48	@ 0x30
 800335a:	d86b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d060      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	2b20      	cmp	r3, #32
 8003362:	d867      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05c      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 8003368:	2b10      	cmp	r3, #16
 800336a:	d05a      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 800336c:	e062      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800337e:	f000 fcc7 	bl	8003d10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	609a      	str	r2, [r3, #8]
      break;
 800339a:	e04f      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ac:	f000 fcb0 	bl	8003d10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033be:	609a      	str	r2, [r3, #8]
      break;
 80033c0:	e03c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 fb6e 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2150      	movs	r1, #80	@ 0x50
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fc7d 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 80033e0:	e02c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 fbca 	bl	8003b88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2160      	movs	r1, #96	@ 0x60
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc6d 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003400:	e01c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fb4e 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2140      	movs	r1, #64	@ 0x40
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fc5d 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003420:	e00c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fc54 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003432:	e003      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      break;
 8003438:	e000      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800343a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d831      	bhi.n	80034d0 <HAL_TIM_ReadCapturedValue+0x78>
 800346c:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <HAL_TIM_ReadCapturedValue+0x1c>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034d1 	.word	0x080034d1
 800347c:	080034d1 	.word	0x080034d1
 8003480:	080034d1 	.word	0x080034d1
 8003484:	080034b3 	.word	0x080034b3
 8003488:	080034d1 	.word	0x080034d1
 800348c:	080034d1 	.word	0x080034d1
 8003490:	080034d1 	.word	0x080034d1
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080034d1 	.word	0x080034d1
 80034a4:	080034c7 	.word	0x080034c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ae:	60fb      	str	r3, [r7, #12]

      break;
 80034b0:	e00f      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	60fb      	str	r3, [r7, #12]

      break;
 80034ba:	e00a      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	60fb      	str	r3, [r7, #12]

      break;
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	60fb      	str	r3, [r7, #12]

      break;
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034d0:	bf00      	nop
  }

  return tmpreg;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a43      	ldr	r2, [pc, #268]	@ (800363c <TIM_Base_SetConfig+0x120>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353a:	d00f      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a40      	ldr	r2, [pc, #256]	@ (8003640 <TIM_Base_SetConfig+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3f      	ldr	r2, [pc, #252]	@ (8003644 <TIM_Base_SetConfig+0x128>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3e      	ldr	r2, [pc, #248]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3d      	ldr	r2, [pc, #244]	@ (800364c <TIM_Base_SetConfig+0x130>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a32      	ldr	r2, [pc, #200]	@ (800363c <TIM_Base_SetConfig+0x120>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d027      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2f      	ldr	r2, [pc, #188]	@ (8003640 <TIM_Base_SetConfig+0x124>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d023      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2e      	ldr	r2, [pc, #184]	@ (8003644 <TIM_Base_SetConfig+0x128>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2d      	ldr	r2, [pc, #180]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2c      	ldr	r2, [pc, #176]	@ (800364c <TIM_Base_SetConfig+0x130>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d017      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <TIM_Base_SetConfig+0x134>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <TIM_Base_SetConfig+0x138>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a28      	ldr	r2, [pc, #160]	@ (800365c <TIM_Base_SetConfig+0x140>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a27      	ldr	r2, [pc, #156]	@ (8003660 <TIM_Base_SetConfig+0x144>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a26      	ldr	r2, [pc, #152]	@ (8003664 <TIM_Base_SetConfig+0x148>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a0e      	ldr	r2, [pc, #56]	@ (800363c <TIM_Base_SetConfig+0x120>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0xf2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a10      	ldr	r2, [pc, #64]	@ (800364c <TIM_Base_SetConfig+0x130>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d103      	bne.n	8003616 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40010000 	.word	0x40010000
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40000c00 	.word	0x40000c00
 800364c:	40010400 	.word	0x40010400
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	40001800 	.word	0x40001800
 8003660:	40001c00 	.word	0x40001c00
 8003664:	40002000 	.word	0x40002000

08003668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 0201 	bic.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 0302 	bic.w	r3, r3, #2
 80036b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <TIM_OC1_SetConfig+0xd8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC1_SetConfig+0x64>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <TIM_OC1_SetConfig+0xdc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10c      	bne.n	80036e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0308 	bic.w	r3, r3, #8
 80036d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a15      	ldr	r2, [pc, #84]	@ (8003740 <TIM_OC1_SetConfig+0xd8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_OC1_SetConfig+0x8e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a14      	ldr	r2, [pc, #80]	@ (8003744 <TIM_OC1_SetConfig+0xdc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40010000 	.word	0x40010000
 8003744:	40010400 	.word	0x40010400

08003748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f023 0210 	bic.w	r2, r3, #16
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a22      	ldr	r2, [pc, #136]	@ (800382c <TIM_OC2_SetConfig+0xe4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_OC2_SetConfig+0x68>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <TIM_OC2_SetConfig+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10d      	bne.n	80037cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a17      	ldr	r2, [pc, #92]	@ (800382c <TIM_OC2_SetConfig+0xe4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_OC2_SetConfig+0x94>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a16      	ldr	r2, [pc, #88]	@ (8003830 <TIM_OC2_SetConfig+0xe8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d113      	bne.n	8003804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40010400 	.word	0x40010400

08003834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a21      	ldr	r2, [pc, #132]	@ (8003914 <TIM_OC3_SetConfig+0xe0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC3_SetConfig+0x66>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a20      	ldr	r2, [pc, #128]	@ (8003918 <TIM_OC3_SetConfig+0xe4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <TIM_OC3_SetConfig+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC3_SetConfig+0x92>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <TIM_OC3_SetConfig+0xe4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d113      	bne.n	80038ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	621a      	str	r2, [r3, #32]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40010000 	.word	0x40010000
 8003918:	40010400 	.word	0x40010400

0800391c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800394a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	031b      	lsls	r3, r3, #12
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <TIM_OC4_SetConfig+0xa4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_OC4_SetConfig+0x68>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a11      	ldr	r2, [pc, #68]	@ (80039c4 <TIM_OC4_SetConfig+0xa8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d109      	bne.n	8003998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800398a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	019b      	lsls	r3, r3, #6
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400

080039c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f023 0201 	bic.w	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a28      	ldr	r2, [pc, #160]	@ (8003a94 <TIM_TI1_SetConfig+0xcc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01b      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d017      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a25      	ldr	r2, [pc, #148]	@ (8003a98 <TIM_TI1_SetConfig+0xd0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a24      	ldr	r2, [pc, #144]	@ (8003a9c <TIM_TI1_SetConfig+0xd4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a23      	ldr	r2, [pc, #140]	@ (8003aa0 <TIM_TI1_SetConfig+0xd8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <TIM_TI1_SetConfig+0xdc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <TIM_TI1_SetConfig+0xe0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_TI1_SetConfig+0x66>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a20      	ldr	r2, [pc, #128]	@ (8003aac <TIM_TI1_SetConfig+0xe4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <TIM_TI1_SetConfig+0x6a>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <TIM_TI1_SetConfig+0x6c>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e003      	b.n	8003a52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f023 030a 	bic.w	r3, r3, #10
 8003a6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f003 030a 	and.w	r3, r3, #10
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40001800 	.word	0x40001800

08003ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 030a 	bic.w	r3, r3, #10
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b087      	sub	sp, #28
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0210 	bic.w	r2, r3, #16
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0210 	bic.w	r2, r3, #16
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	031b      	lsls	r3, r3, #12
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f023 0303 	bic.w	r3, r3, #3
 8003c14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	031b      	lsls	r3, r3, #12
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f043 0307 	orr.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2201      	movs	r2, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e05a      	b.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e00:	d01d      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10c      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40001800 	.word	0x40001800

08003e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e042      	b.n	8003f54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd f95e 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	@ 0x24
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fd7f 	bl	8004a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d175      	bne.n	8004068 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_UART_Transmit+0x2c>
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e06e      	b.n	800406a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2221      	movs	r2, #33	@ 0x21
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9a:	f7fd f9e3 	bl	8001364 <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb4:	d108      	bne.n	8003fc8 <HAL_UART_Transmit+0x6c>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e003      	b.n	8003fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd0:	e02e      	b.n	8004030 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	@ 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fb1d 	bl	800461c <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e03a      	b.n	800406a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	3302      	adds	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e007      	b.n	8004022 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1cb      	bne.n	8003fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	2140      	movs	r1, #64	@ 0x40
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fae9 	bl	800461c <UART_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0ba      	sub	sp, #232	@ 0xe8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_UART_IRQHandler+0x66>
 80040c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fbd7 	bl	8004886 <UART_Receive_IT>
      return;
 80040d8:	e273      	b.n	80045c2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80de 	beq.w	80042a0 <HAL_UART_IRQHandler+0x22c>
 80040e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80d1 	beq.w	80042a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0xae>
 800410a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_UART_IRQHandler+0xd2>
 800412e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_UART_IRQHandler+0xf6>
 8004152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <HAL_UART_IRQHandler+0x126>
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f043 0208 	orr.w	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 820a 	beq.w	80045b8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14e>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb62 	bl	8004886 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b40      	cmp	r3, #64	@ 0x40
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <HAL_UART_IRQHandler+0x17a>
 80041e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04f      	beq.n	800428e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa6d 	bl	80046ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d141      	bne.n	8004286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800421c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800422e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800423a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d9      	bne.n	8004202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425a:	4a8a      	ldr	r2, [pc, #552]	@ (8004484 <HAL_UART_IRQHandler+0x410>)
 800425c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fa2f 	bl	80016c6 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	e00e      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9b6 	bl	80045f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00a      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9b2 	bl	80045f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e006      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9ae 	bl	80045f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800429a:	e18d      	b.n	80045b8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	bf00      	nop
    return;
 800429e:	e18b      	b.n	80045b8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	f040 8167 	bne.w	8004578 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8160 	beq.w	8004578 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8159 	beq.w	8004578 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	f040 80ce 	bne.w	8004488 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a9 	beq.w	8004454 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800430a:	429a      	cmp	r2, r3
 800430c:	f080 80a2 	bcs.w	8004454 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004316:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004322:	f000 8088 	beq.w	8004436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800433c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800435e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800436a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1d9      	bne.n	8004326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004396:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800439a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800439e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e1      	bne.n	8004372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e3      	bne.n	80043ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004406:	f023 0310 	bic.w	r3, r3, #16
 800440a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004418:	65ba      	str	r2, [r7, #88]	@ 0x58
 800441a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800441e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e3      	bne.n	80043f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	4618      	mov	r0, r3
 8004432:	f7fd f8d8 	bl	80015e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004444:	b29b      	uxth	r3, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	b29b      	uxth	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8d9 	bl	8004604 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004452:	e0b3      	b.n	80045bc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800445c:	429a      	cmp	r2, r3
 800445e:	f040 80ad 	bne.w	80045bc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446c:	f040 80a6 	bne.w	80045bc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8c1 	bl	8004604 <HAL_UARTEx_RxEventCallback>
      return;
 8004482:	e09b      	b.n	80045bc <HAL_UART_IRQHandler+0x548>
 8004484:	08004795 	.word	0x08004795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 808e 	beq.w	80045c0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80044a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8089 	beq.w	80045c0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80044d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e3      	bne.n	80044ae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	623b      	str	r3, [r7, #32]
   return(result);
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800450a:	633a      	str	r2, [r7, #48]	@ 0x30
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e3      	bne.n	80044e6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	60fb      	str	r3, [r7, #12]
   return(result);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0310 	bic.w	r3, r3, #16
 8004542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004550:	61fa      	str	r2, [r7, #28]
 8004552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	69b9      	ldr	r1, [r7, #24]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	617b      	str	r3, [r7, #20]
   return(result);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e3      	bne.n	800452c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800456a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f847 	bl	8004604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004576:	e023      	b.n	80045c0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <HAL_UART_IRQHandler+0x524>
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f910 	bl	80047b6 <UART_Transmit_IT>
    return;
 8004596:	e014      	b.n	80045c2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <HAL_UART_IRQHandler+0x54e>
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f950 	bl	8004856 <UART_EndTransmit_IT>
    return;
 80045b6:	e004      	b.n	80045c2 <HAL_UART_IRQHandler+0x54e>
    return;
 80045b8:	bf00      	nop
 80045ba:	e002      	b.n	80045c2 <HAL_UART_IRQHandler+0x54e>
      return;
 80045bc:	bf00      	nop
 80045be:	e000      	b.n	80045c2 <HAL_UART_IRQHandler+0x54e>
      return;
 80045c0:	bf00      	nop
  }
}
 80045c2:	37e8      	adds	r7, #232	@ 0xe8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462c:	e03b      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d037      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004636:	f7fc fe95 	bl	8001364 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <UART_WaitOnFlagUntilTimeout+0x30>
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e03a      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d023      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b80      	cmp	r3, #128	@ 0x80
 8004662:	d020      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	d01d      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b08      	cmp	r3, #8
 8004676:	d116      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f81d 	bl	80046ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2208      	movs	r2, #8
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00f      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d0b4      	beq.n	800462e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b095      	sub	sp, #84	@ 0x54
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80046f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	61fb      	str	r3, [r7, #28]
   return(result);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3314      	adds	r3, #20
 8004728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	2b01      	cmp	r3, #1
 8004744:	d119      	bne.n	800477a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	60bb      	str	r3, [r7, #8]
   return(result);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0310 	bic.w	r3, r3, #16
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004766:	61ba      	str	r2, [r7, #24]
 8004768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	613b      	str	r3, [r7, #16]
   return(result);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004788:	bf00      	nop
 800478a:	3754      	adds	r7, #84	@ 0x54
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff ff21 	bl	80045f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b21      	cmp	r3, #33	@ 0x21
 80047c8:	d13e      	bne.n	8004848 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d2:	d114      	bne.n	80047fe <UART_Transmit_IT+0x48>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d110      	bne.n	80047fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	1c9a      	adds	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]
 80047fc:	e008      	b.n	8004810 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	1c59      	adds	r1, r3, #1
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6211      	str	r1, [r2, #32]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4619      	mov	r1, r3
 800481e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10f      	bne.n	8004844 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004832:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004842:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800486c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fea6 	bl	80045c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b08c      	sub	sp, #48	@ 0x30
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b22      	cmp	r3, #34	@ 0x22
 80048a0:	f040 80aa 	bne.w	80049f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ac:	d115      	bne.n	80048da <UART_Receive_IT+0x54>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d111      	bne.n	80048da <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048d8:	e024      	b.n	8004924 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e8:	d007      	beq.n	80048fa <UART_Receive_IT+0x74>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <UART_Receive_IT+0x82>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e008      	b.n	800491a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004914:	b2da      	uxtb	r2, r3
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4619      	mov	r1, r3
 8004932:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004934:	2b00      	cmp	r3, #0
 8004936:	d15d      	bne.n	80049f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0220 	bic.w	r2, r2, #32
 8004946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	2b01      	cmp	r3, #1
 800497c:	d135      	bne.n	80049ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	613b      	str	r3, [r7, #16]
   return(result);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 0310 	bic.w	r3, r3, #16
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a4:	623a      	str	r2, [r7, #32]
 80049a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	69f9      	ldr	r1, [r7, #28]
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d10a      	bne.n	80049dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe0e 	bl	8004604 <HAL_UARTEx_RxEventCallback>
 80049e8:	e002      	b.n	80049f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fdf6 	bl	80045dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e002      	b.n	80049fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3730      	adds	r7, #48	@ 0x30
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b0c0      	sub	sp, #256	@ 0x100
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	68d9      	ldr	r1, [r3, #12]
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	ea40 0301 	orr.w	r3, r0, r1
 8004a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a5c:	f021 010c 	bic.w	r1, r1, #12
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	6999      	ldr	r1, [r3, #24]
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	ea40 0301 	orr.w	r3, r0, r1
 8004a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd0 <UART_SetConfig+0x2cc>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d005      	beq.n	8004aa4 <UART_SetConfig+0xa0>
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004cd4 <UART_SetConfig+0x2d0>)
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d104      	bne.n	8004aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fd f8fe 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004aac:	e003      	b.n	8004ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aae:	f7fd f8e5 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8004ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac0:	f040 810c 	bne.w	8004cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ace:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	462b      	mov	r3, r5
 8004ada:	1891      	adds	r1, r2, r2
 8004adc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ade:	415b      	adcs	r3, r3
 8004ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	eb12 0801 	adds.w	r8, r2, r1
 8004aec:	4629      	mov	r1, r5
 8004aee:	eb43 0901 	adc.w	r9, r3, r1
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b06:	4690      	mov	r8, r2
 8004b08:	4699      	mov	r9, r3
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	eb18 0303 	adds.w	r3, r8, r3
 8004b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b14:	462b      	mov	r3, r5
 8004b16:	eb49 0303 	adc.w	r3, r9, r3
 8004b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b32:	460b      	mov	r3, r1
 8004b34:	18db      	adds	r3, r3, r3
 8004b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b38:	4613      	mov	r3, r2
 8004b3a:	eb42 0303 	adc.w	r3, r2, r3
 8004b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b48:	f7fb fbba 	bl	80002c0 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4b61      	ldr	r3, [pc, #388]	@ (8004cd8 <UART_SetConfig+0x2d4>)
 8004b52:	fba3 2302 	umull	r2, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	011c      	lsls	r4, r3, #4
 8004b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	1891      	adds	r1, r2, r2
 8004b72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b74:	415b      	adcs	r3, r3
 8004b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b82:	4649      	mov	r1, r9
 8004b84:	eb43 0b01 	adc.w	fp, r3, r1
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b9c:	4692      	mov	sl, r2
 8004b9e:	469b      	mov	fp, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004baa:	464b      	mov	r3, r9
 8004bac:	eb4b 0303 	adc.w	r3, fp, r3
 8004bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	18db      	adds	r3, r3, r3
 8004bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bce:	4613      	mov	r3, r2
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bde:	f7fb fb6f 	bl	80002c0 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd8 <UART_SetConfig+0x2d4>)
 8004bea:	fba3 2301 	umull	r2, r3, r3, r1
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2264      	movs	r2, #100	@ 0x64
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	1acb      	subs	r3, r1, r3
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bfe:	4b36      	ldr	r3, [pc, #216]	@ (8004cd8 <UART_SetConfig+0x2d4>)
 8004c00:	fba3 2302 	umull	r2, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c0c:	441c      	add	r4, r3
 8004c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	1891      	adds	r1, r2, r2
 8004c26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c28:	415b      	adcs	r3, r3
 8004c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c30:	4641      	mov	r1, r8
 8004c32:	1851      	adds	r1, r2, r1
 8004c34:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c36:	4649      	mov	r1, r9
 8004c38:	414b      	adcs	r3, r1
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c48:	4659      	mov	r1, fp
 8004c4a:	00cb      	lsls	r3, r1, #3
 8004c4c:	4651      	mov	r1, sl
 8004c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c52:	4651      	mov	r1, sl
 8004c54:	00ca      	lsls	r2, r1, #3
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c64:	464b      	mov	r3, r9
 8004c66:	460a      	mov	r2, r1
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c84:	460b      	mov	r3, r1
 8004c86:	18db      	adds	r3, r3, r3
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	eb42 0303 	adc.w	r3, r2, r3
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c9a:	f7fb fb11 	bl	80002c0 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd8 <UART_SetConfig+0x2d4>)
 8004ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	2164      	movs	r1, #100	@ 0x64
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	3332      	adds	r3, #50	@ 0x32
 8004cb6:	4a08      	ldr	r2, [pc, #32]	@ (8004cd8 <UART_SetConfig+0x2d4>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	f003 0207 	and.w	r2, r3, #7
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4422      	add	r2, r4
 8004cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ccc:	e106      	b.n	8004edc <UART_SetConfig+0x4d8>
 8004cce:	bf00      	nop
 8004cd0:	40011000 	.word	0x40011000
 8004cd4:	40011400 	.word	0x40011400
 8004cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cee:	4642      	mov	r2, r8
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	1891      	adds	r1, r2, r2
 8004cf4:	6239      	str	r1, [r7, #32]
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cfe:	4641      	mov	r1, r8
 8004d00:	1854      	adds	r4, r2, r1
 8004d02:	4649      	mov	r1, r9
 8004d04:	eb43 0501 	adc.w	r5, r3, r1
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	00eb      	lsls	r3, r5, #3
 8004d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d16:	00e2      	lsls	r2, r4, #3
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	18e3      	adds	r3, r4, r3
 8004d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d24:	464b      	mov	r3, r9
 8004d26:	eb45 0303 	adc.w	r3, r5, r3
 8004d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	008b      	lsls	r3, r1, #2
 8004d4e:	4621      	mov	r1, r4
 8004d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d54:	4621      	mov	r1, r4
 8004d56:	008a      	lsls	r2, r1, #2
 8004d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d5c:	f7fb fab0 	bl	80002c0 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4b60      	ldr	r3, [pc, #384]	@ (8004ee8 <UART_SetConfig+0x4e4>)
 8004d66:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	011c      	lsls	r4, r3, #4
 8004d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	1891      	adds	r1, r2, r2
 8004d86:	61b9      	str	r1, [r7, #24]
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d90:	4641      	mov	r1, r8
 8004d92:	1851      	adds	r1, r2, r1
 8004d94:	6139      	str	r1, [r7, #16]
 8004d96:	4649      	mov	r1, r9
 8004d98:	414b      	adcs	r3, r1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da8:	4659      	mov	r1, fp
 8004daa:	00cb      	lsls	r3, r1, #3
 8004dac:	4651      	mov	r1, sl
 8004dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db2:	4651      	mov	r1, sl
 8004db4:	00ca      	lsls	r2, r1, #3
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004de8:	4649      	mov	r1, r9
 8004dea:	008b      	lsls	r3, r1, #2
 8004dec:	4641      	mov	r1, r8
 8004dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df2:	4641      	mov	r1, r8
 8004df4:	008a      	lsls	r2, r1, #2
 8004df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dfa:	f7fb fa61 	bl	80002c0 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	4b38      	ldr	r3, [pc, #224]	@ (8004ee8 <UART_SetConfig+0x4e4>)
 8004e06:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2264      	movs	r2, #100	@ 0x64
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	1acb      	subs	r3, r1, r3
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	3332      	adds	r3, #50	@ 0x32
 8004e18:	4a33      	ldr	r2, [pc, #204]	@ (8004ee8 <UART_SetConfig+0x4e4>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e24:	441c      	add	r4, r3
 8004e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	1891      	adds	r1, r2, r2
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e44:	4641      	mov	r1, r8
 8004e46:	1851      	adds	r1, r2, r1
 8004e48:	6039      	str	r1, [r7, #0]
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	414b      	adcs	r3, r1
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	00cb      	lsls	r3, r1, #3
 8004e60:	4651      	mov	r1, sl
 8004e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e66:	4651      	mov	r1, sl
 8004e68:	00ca      	lsls	r2, r1, #3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4642      	mov	r2, r8
 8004e72:	189b      	adds	r3, r3, r2
 8004e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e76:	464b      	mov	r3, r9
 8004e78:	460a      	mov	r2, r1
 8004e7a:	eb42 0303 	adc.w	r3, r2, r3
 8004e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e98:	4649      	mov	r1, r9
 8004e9a:	008b      	lsls	r3, r1, #2
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	008a      	lsls	r2, r1, #2
 8004ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004eaa:	f7fb fa09 	bl	80002c0 <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <UART_SetConfig+0x4e4>)
 8004eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	2164      	movs	r1, #100	@ 0x64
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	3332      	adds	r3, #50	@ 0x32
 8004ec6:	4a08      	ldr	r2, [pc, #32]	@ (8004ee8 <UART_SetConfig+0x4e4>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	f003 020f 	and.w	r2, r3, #15
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4422      	add	r2, r4
 8004eda:	609a      	str	r2, [r3, #8]
}
 8004edc:	bf00      	nop
 8004ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee8:	51eb851f 	.word	0x51eb851f

08004eec <rand>:
 8004eec:	4b16      	ldr	r3, [pc, #88]	@ (8004f48 <rand+0x5c>)
 8004eee:	b510      	push	{r4, lr}
 8004ef0:	681c      	ldr	r4, [r3, #0]
 8004ef2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ef4:	b9b3      	cbnz	r3, 8004f24 <rand+0x38>
 8004ef6:	2018      	movs	r0, #24
 8004ef8:	f000 fa42 	bl	8005380 <malloc>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6320      	str	r0, [r4, #48]	@ 0x30
 8004f00:	b920      	cbnz	r0, 8004f0c <rand+0x20>
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <rand+0x60>)
 8004f04:	4812      	ldr	r0, [pc, #72]	@ (8004f50 <rand+0x64>)
 8004f06:	2152      	movs	r1, #82	@ 0x52
 8004f08:	f000 f9d2 	bl	80052b0 <__assert_func>
 8004f0c:	4911      	ldr	r1, [pc, #68]	@ (8004f54 <rand+0x68>)
 8004f0e:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <rand+0x6c>)
 8004f10:	e9c0 1300 	strd	r1, r3, [r0]
 8004f14:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <rand+0x70>)
 8004f16:	6083      	str	r3, [r0, #8]
 8004f18:	230b      	movs	r3, #11
 8004f1a:	8183      	strh	r3, [r0, #12]
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	2001      	movs	r0, #1
 8004f20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004f24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f26:	480e      	ldr	r0, [pc, #56]	@ (8004f60 <rand+0x74>)
 8004f28:	690b      	ldr	r3, [r1, #16]
 8004f2a:	694c      	ldr	r4, [r1, #20]
 8004f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f64 <rand+0x78>)
 8004f2e:	4358      	muls	r0, r3
 8004f30:	fb02 0004 	mla	r0, r2, r4, r0
 8004f34:	fba3 3202 	umull	r3, r2, r3, r2
 8004f38:	3301      	adds	r3, #1
 8004f3a:	eb40 0002 	adc.w	r0, r0, r2
 8004f3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004f42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	2000001c 	.word	0x2000001c
 8004f4c:	08006328 	.word	0x08006328
 8004f50:	0800633f 	.word	0x0800633f
 8004f54:	abcd330e 	.word	0xabcd330e
 8004f58:	e66d1234 	.word	0xe66d1234
 8004f5c:	0005deec 	.word	0x0005deec
 8004f60:	5851f42d 	.word	0x5851f42d
 8004f64:	4c957f2d 	.word	0x4c957f2d

08004f68 <std>:
 8004f68:	2300      	movs	r3, #0
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f76:	6083      	str	r3, [r0, #8]
 8004f78:	8181      	strh	r1, [r0, #12]
 8004f7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f7c:	81c2      	strh	r2, [r0, #14]
 8004f7e:	6183      	str	r3, [r0, #24]
 8004f80:	4619      	mov	r1, r3
 8004f82:	2208      	movs	r2, #8
 8004f84:	305c      	adds	r0, #92	@ 0x5c
 8004f86:	f000 f916 	bl	80051b6 <memset>
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <std+0x58>)
 8004f8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <std+0x5c>)
 8004f90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <std+0x60>)
 8004f94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f96:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <std+0x64>)
 8004f98:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <std+0x68>)
 8004f9c:	6224      	str	r4, [r4, #32]
 8004f9e:	429c      	cmp	r4, r3
 8004fa0:	d006      	beq.n	8004fb0 <std+0x48>
 8004fa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fa6:	4294      	cmp	r4, r2
 8004fa8:	d002      	beq.n	8004fb0 <std+0x48>
 8004faa:	33d0      	adds	r3, #208	@ 0xd0
 8004fac:	429c      	cmp	r4, r3
 8004fae:	d105      	bne.n	8004fbc <std+0x54>
 8004fb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb8:	f000 b976 	b.w	80052a8 <__retarget_lock_init_recursive>
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	bf00      	nop
 8004fc0:	08005131 	.word	0x08005131
 8004fc4:	08005153 	.word	0x08005153
 8004fc8:	0800518b 	.word	0x0800518b
 8004fcc:	080051af 	.word	0x080051af
 8004fd0:	20000178 	.word	0x20000178

08004fd4 <stdio_exit_handler>:
 8004fd4:	4a02      	ldr	r2, [pc, #8]	@ (8004fe0 <stdio_exit_handler+0xc>)
 8004fd6:	4903      	ldr	r1, [pc, #12]	@ (8004fe4 <stdio_exit_handler+0x10>)
 8004fd8:	4803      	ldr	r0, [pc, #12]	@ (8004fe8 <stdio_exit_handler+0x14>)
 8004fda:	f000 b869 	b.w	80050b0 <_fwalk_sglue>
 8004fde:	bf00      	nop
 8004fe0:	20000010 	.word	0x20000010
 8004fe4:	08005bbd 	.word	0x08005bbd
 8004fe8:	20000020 	.word	0x20000020

08004fec <cleanup_stdio>:
 8004fec:	6841      	ldr	r1, [r0, #4]
 8004fee:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <cleanup_stdio+0x34>)
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	d001      	beq.n	8004ffc <cleanup_stdio+0x10>
 8004ff8:	f000 fde0 	bl	8005bbc <_fflush_r>
 8004ffc:	68a1      	ldr	r1, [r4, #8]
 8004ffe:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <cleanup_stdio+0x38>)
 8005000:	4299      	cmp	r1, r3
 8005002:	d002      	beq.n	800500a <cleanup_stdio+0x1e>
 8005004:	4620      	mov	r0, r4
 8005006:	f000 fdd9 	bl	8005bbc <_fflush_r>
 800500a:	68e1      	ldr	r1, [r4, #12]
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <cleanup_stdio+0x3c>)
 800500e:	4299      	cmp	r1, r3
 8005010:	d004      	beq.n	800501c <cleanup_stdio+0x30>
 8005012:	4620      	mov	r0, r4
 8005014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005018:	f000 bdd0 	b.w	8005bbc <_fflush_r>
 800501c:	bd10      	pop	{r4, pc}
 800501e:	bf00      	nop
 8005020:	20000178 	.word	0x20000178
 8005024:	200001e0 	.word	0x200001e0
 8005028:	20000248 	.word	0x20000248

0800502c <global_stdio_init.part.0>:
 800502c:	b510      	push	{r4, lr}
 800502e:	4b0b      	ldr	r3, [pc, #44]	@ (800505c <global_stdio_init.part.0+0x30>)
 8005030:	4c0b      	ldr	r4, [pc, #44]	@ (8005060 <global_stdio_init.part.0+0x34>)
 8005032:	4a0c      	ldr	r2, [pc, #48]	@ (8005064 <global_stdio_init.part.0+0x38>)
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	4620      	mov	r0, r4
 8005038:	2200      	movs	r2, #0
 800503a:	2104      	movs	r1, #4
 800503c:	f7ff ff94 	bl	8004f68 <std>
 8005040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005044:	2201      	movs	r2, #1
 8005046:	2109      	movs	r1, #9
 8005048:	f7ff ff8e 	bl	8004f68 <std>
 800504c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005050:	2202      	movs	r2, #2
 8005052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005056:	2112      	movs	r1, #18
 8005058:	f7ff bf86 	b.w	8004f68 <std>
 800505c:	200002b0 	.word	0x200002b0
 8005060:	20000178 	.word	0x20000178
 8005064:	08004fd5 	.word	0x08004fd5

08005068 <__sfp_lock_acquire>:
 8005068:	4801      	ldr	r0, [pc, #4]	@ (8005070 <__sfp_lock_acquire+0x8>)
 800506a:	f000 b91e 	b.w	80052aa <__retarget_lock_acquire_recursive>
 800506e:	bf00      	nop
 8005070:	200002b9 	.word	0x200002b9

08005074 <__sfp_lock_release>:
 8005074:	4801      	ldr	r0, [pc, #4]	@ (800507c <__sfp_lock_release+0x8>)
 8005076:	f000 b919 	b.w	80052ac <__retarget_lock_release_recursive>
 800507a:	bf00      	nop
 800507c:	200002b9 	.word	0x200002b9

08005080 <__sinit>:
 8005080:	b510      	push	{r4, lr}
 8005082:	4604      	mov	r4, r0
 8005084:	f7ff fff0 	bl	8005068 <__sfp_lock_acquire>
 8005088:	6a23      	ldr	r3, [r4, #32]
 800508a:	b11b      	cbz	r3, 8005094 <__sinit+0x14>
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	f7ff bff0 	b.w	8005074 <__sfp_lock_release>
 8005094:	4b04      	ldr	r3, [pc, #16]	@ (80050a8 <__sinit+0x28>)
 8005096:	6223      	str	r3, [r4, #32]
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <__sinit+0x2c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f5      	bne.n	800508c <__sinit+0xc>
 80050a0:	f7ff ffc4 	bl	800502c <global_stdio_init.part.0>
 80050a4:	e7f2      	b.n	800508c <__sinit+0xc>
 80050a6:	bf00      	nop
 80050a8:	08004fed 	.word	0x08004fed
 80050ac:	200002b0 	.word	0x200002b0

080050b0 <_fwalk_sglue>:
 80050b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b4:	4607      	mov	r7, r0
 80050b6:	4688      	mov	r8, r1
 80050b8:	4614      	mov	r4, r2
 80050ba:	2600      	movs	r6, #0
 80050bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c0:	f1b9 0901 	subs.w	r9, r9, #1
 80050c4:	d505      	bpl.n	80050d2 <_fwalk_sglue+0x22>
 80050c6:	6824      	ldr	r4, [r4, #0]
 80050c8:	2c00      	cmp	r4, #0
 80050ca:	d1f7      	bne.n	80050bc <_fwalk_sglue+0xc>
 80050cc:	4630      	mov	r0, r6
 80050ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d907      	bls.n	80050e8 <_fwalk_sglue+0x38>
 80050d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050dc:	3301      	adds	r3, #1
 80050de:	d003      	beq.n	80050e8 <_fwalk_sglue+0x38>
 80050e0:	4629      	mov	r1, r5
 80050e2:	4638      	mov	r0, r7
 80050e4:	47c0      	blx	r8
 80050e6:	4306      	orrs	r6, r0
 80050e8:	3568      	adds	r5, #104	@ 0x68
 80050ea:	e7e9      	b.n	80050c0 <_fwalk_sglue+0x10>

080050ec <siprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b510      	push	{r4, lr}
 80050f0:	b09d      	sub	sp, #116	@ 0x74
 80050f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050f4:	9002      	str	r0, [sp, #8]
 80050f6:	9006      	str	r0, [sp, #24]
 80050f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050fc:	480a      	ldr	r0, [pc, #40]	@ (8005128 <siprintf+0x3c>)
 80050fe:	9107      	str	r1, [sp, #28]
 8005100:	9104      	str	r1, [sp, #16]
 8005102:	490a      	ldr	r1, [pc, #40]	@ (800512c <siprintf+0x40>)
 8005104:	f853 2b04 	ldr.w	r2, [r3], #4
 8005108:	9105      	str	r1, [sp, #20]
 800510a:	2400      	movs	r4, #0
 800510c:	a902      	add	r1, sp, #8
 800510e:	6800      	ldr	r0, [r0, #0]
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005114:	f000 fa46 	bl	80055a4 <_svfiprintf_r>
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	701c      	strb	r4, [r3, #0]
 800511c:	b01d      	add	sp, #116	@ 0x74
 800511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005122:	b003      	add	sp, #12
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	2000001c 	.word	0x2000001c
 800512c:	ffff0208 	.word	0xffff0208

08005130 <__sread>:
 8005130:	b510      	push	{r4, lr}
 8005132:	460c      	mov	r4, r1
 8005134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005138:	f000 f868 	bl	800520c <_read_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	bfab      	itete	ge
 8005140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005142:	89a3      	ldrhlt	r3, [r4, #12]
 8005144:	181b      	addge	r3, r3, r0
 8005146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800514a:	bfac      	ite	ge
 800514c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800514e:	81a3      	strhlt	r3, [r4, #12]
 8005150:	bd10      	pop	{r4, pc}

08005152 <__swrite>:
 8005152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005156:	461f      	mov	r7, r3
 8005158:	898b      	ldrh	r3, [r1, #12]
 800515a:	05db      	lsls	r3, r3, #23
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	4616      	mov	r6, r2
 8005162:	d505      	bpl.n	8005170 <__swrite+0x1e>
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	2302      	movs	r3, #2
 800516a:	2200      	movs	r2, #0
 800516c:	f000 f83c 	bl	80051e8 <_lseek_r>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	4632      	mov	r2, r6
 800517e:	463b      	mov	r3, r7
 8005180:	4628      	mov	r0, r5
 8005182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	f000 b853 	b.w	8005230 <_write_r>

0800518a <__sseek>:
 800518a:	b510      	push	{r4, lr}
 800518c:	460c      	mov	r4, r1
 800518e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005192:	f000 f829 	bl	80051e8 <_lseek_r>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	bf15      	itete	ne
 800519c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800519e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051a6:	81a3      	strheq	r3, [r4, #12]
 80051a8:	bf18      	it	ne
 80051aa:	81a3      	strhne	r3, [r4, #12]
 80051ac:	bd10      	pop	{r4, pc}

080051ae <__sclose>:
 80051ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b2:	f000 b809 	b.w	80051c8 <_close_r>

080051b6 <memset>:
 80051b6:	4402      	add	r2, r0
 80051b8:	4603      	mov	r3, r0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d100      	bne.n	80051c0 <memset+0xa>
 80051be:	4770      	bx	lr
 80051c0:	f803 1b01 	strb.w	r1, [r3], #1
 80051c4:	e7f9      	b.n	80051ba <memset+0x4>
	...

080051c8 <_close_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d06      	ldr	r5, [pc, #24]	@ (80051e4 <_close_r+0x1c>)
 80051cc:	2300      	movs	r3, #0
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	f7fb fd7e 	bl	8000cd4 <_close>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_close_r+0x1a>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_close_r+0x1a>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200002b4 	.word	0x200002b4

080051e8 <_lseek_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	@ (8005208 <_lseek_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fb fd93 	bl	8000d22 <_lseek>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_lseek_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_lseek_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200002b4 	.word	0x200002b4

0800520c <_read_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	@ (800522c <_read_r+0x20>)
 8005210:	4604      	mov	r4, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	602a      	str	r2, [r5, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fb fd21 	bl	8000c62 <_read>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_read_r+0x1e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_read_r+0x1e>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200002b4 	.word	0x200002b4

08005230 <_write_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	@ (8005250 <_write_r+0x20>)
 8005234:	4604      	mov	r4, r0
 8005236:	4608      	mov	r0, r1
 8005238:	4611      	mov	r1, r2
 800523a:	2200      	movs	r2, #0
 800523c:	602a      	str	r2, [r5, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f7fb fd2c 	bl	8000c9c <_write>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_write_r+0x1e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_write_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	200002b4 	.word	0x200002b4

08005254 <__errno>:
 8005254:	4b01      	ldr	r3, [pc, #4]	@ (800525c <__errno+0x8>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000001c 	.word	0x2000001c

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	4d0d      	ldr	r5, [pc, #52]	@ (8005298 <__libc_init_array+0x38>)
 8005264:	4c0d      	ldr	r4, [pc, #52]	@ (800529c <__libc_init_array+0x3c>)
 8005266:	1b64      	subs	r4, r4, r5
 8005268:	10a4      	asrs	r4, r4, #2
 800526a:	2600      	movs	r6, #0
 800526c:	42a6      	cmp	r6, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	4d0b      	ldr	r5, [pc, #44]	@ (80052a0 <__libc_init_array+0x40>)
 8005272:	4c0c      	ldr	r4, [pc, #48]	@ (80052a4 <__libc_init_array+0x44>)
 8005274:	f000 ffee 	bl	8006254 <_init>
 8005278:	1b64      	subs	r4, r4, r5
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	2600      	movs	r6, #0
 800527e:	42a6      	cmp	r6, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f855 3b04 	ldr.w	r3, [r5], #4
 8005288:	4798      	blx	r3
 800528a:	3601      	adds	r6, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005292:	4798      	blx	r3
 8005294:	3601      	adds	r6, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	08006410 	.word	0x08006410
 800529c:	08006410 	.word	0x08006410
 80052a0:	08006410 	.word	0x08006410
 80052a4:	08006414 	.word	0x08006414

080052a8 <__retarget_lock_init_recursive>:
 80052a8:	4770      	bx	lr

080052aa <__retarget_lock_acquire_recursive>:
 80052aa:	4770      	bx	lr

080052ac <__retarget_lock_release_recursive>:
 80052ac:	4770      	bx	lr
	...

080052b0 <__assert_func>:
 80052b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052b2:	4614      	mov	r4, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <__assert_func+0x2c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4605      	mov	r5, r0
 80052bc:	68d8      	ldr	r0, [r3, #12]
 80052be:	b14c      	cbz	r4, 80052d4 <__assert_func+0x24>
 80052c0:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <__assert_func+0x30>)
 80052c2:	9100      	str	r1, [sp, #0]
 80052c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052c8:	4906      	ldr	r1, [pc, #24]	@ (80052e4 <__assert_func+0x34>)
 80052ca:	462b      	mov	r3, r5
 80052cc:	f000 fc9e 	bl	8005c0c <fiprintf>
 80052d0:	f000 fce6 	bl	8005ca0 <abort>
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <__assert_func+0x38>)
 80052d6:	461c      	mov	r4, r3
 80052d8:	e7f3      	b.n	80052c2 <__assert_func+0x12>
 80052da:	bf00      	nop
 80052dc:	2000001c 	.word	0x2000001c
 80052e0:	08006397 	.word	0x08006397
 80052e4:	080063a4 	.word	0x080063a4
 80052e8:	080063d2 	.word	0x080063d2

080052ec <_free_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4605      	mov	r5, r0
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d041      	beq.n	8005378 <_free_r+0x8c>
 80052f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f8:	1f0c      	subs	r4, r1, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfb8      	it	lt
 80052fe:	18e4      	addlt	r4, r4, r3
 8005300:	f000 f8e8 	bl	80054d4 <__malloc_lock>
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <_free_r+0x90>)
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	b933      	cbnz	r3, 8005318 <_free_r+0x2c>
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	6014      	str	r4, [r2, #0]
 800530e:	4628      	mov	r0, r5
 8005310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005314:	f000 b8e4 	b.w	80054e0 <__malloc_unlock>
 8005318:	42a3      	cmp	r3, r4
 800531a:	d908      	bls.n	800532e <_free_r+0x42>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	1821      	adds	r1, r4, r0
 8005320:	428b      	cmp	r3, r1
 8005322:	bf01      	itttt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	1809      	addeq	r1, r1, r0
 800532a:	6021      	streq	r1, [r4, #0]
 800532c:	e7ed      	b.n	800530a <_free_r+0x1e>
 800532e:	461a      	mov	r2, r3
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	b10b      	cbz	r3, 8005338 <_free_r+0x4c>
 8005334:	42a3      	cmp	r3, r4
 8005336:	d9fa      	bls.n	800532e <_free_r+0x42>
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	1850      	adds	r0, r2, r1
 800533c:	42a0      	cmp	r0, r4
 800533e:	d10b      	bne.n	8005358 <_free_r+0x6c>
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	4401      	add	r1, r0
 8005344:	1850      	adds	r0, r2, r1
 8005346:	4283      	cmp	r3, r0
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	d1e0      	bne.n	800530e <_free_r+0x22>
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	4408      	add	r0, r1
 8005354:	6010      	str	r0, [r2, #0]
 8005356:	e7da      	b.n	800530e <_free_r+0x22>
 8005358:	d902      	bls.n	8005360 <_free_r+0x74>
 800535a:	230c      	movs	r3, #12
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	e7d6      	b.n	800530e <_free_r+0x22>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	1821      	adds	r1, r4, r0
 8005364:	428b      	cmp	r3, r1
 8005366:	bf04      	itt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	bf04      	itt	eq
 8005370:	1809      	addeq	r1, r1, r0
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7ca      	b.n	800530e <_free_r+0x22>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	200002c0 	.word	0x200002c0

08005380 <malloc>:
 8005380:	4b02      	ldr	r3, [pc, #8]	@ (800538c <malloc+0xc>)
 8005382:	4601      	mov	r1, r0
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	f000 b825 	b.w	80053d4 <_malloc_r>
 800538a:	bf00      	nop
 800538c:	2000001c 	.word	0x2000001c

08005390 <sbrk_aligned>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4e0f      	ldr	r6, [pc, #60]	@ (80053d0 <sbrk_aligned+0x40>)
 8005394:	460c      	mov	r4, r1
 8005396:	6831      	ldr	r1, [r6, #0]
 8005398:	4605      	mov	r5, r0
 800539a:	b911      	cbnz	r1, 80053a2 <sbrk_aligned+0x12>
 800539c:	f000 fc62 	bl	8005c64 <_sbrk_r>
 80053a0:	6030      	str	r0, [r6, #0]
 80053a2:	4621      	mov	r1, r4
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 fc5d 	bl	8005c64 <_sbrk_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d103      	bne.n	80053b6 <sbrk_aligned+0x26>
 80053ae:	f04f 34ff 	mov.w	r4, #4294967295
 80053b2:	4620      	mov	r0, r4
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d0f8      	beq.n	80053b2 <sbrk_aligned+0x22>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 fc4e 	bl	8005c64 <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1f2      	bne.n	80053b2 <sbrk_aligned+0x22>
 80053cc:	e7ef      	b.n	80053ae <sbrk_aligned+0x1e>
 80053ce:	bf00      	nop
 80053d0:	200002bc 	.word	0x200002bc

080053d4 <_malloc_r>:
 80053d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d8:	1ccd      	adds	r5, r1, #3
 80053da:	f025 0503 	bic.w	r5, r5, #3
 80053de:	3508      	adds	r5, #8
 80053e0:	2d0c      	cmp	r5, #12
 80053e2:	bf38      	it	cc
 80053e4:	250c      	movcc	r5, #12
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	4606      	mov	r6, r0
 80053ea:	db01      	blt.n	80053f0 <_malloc_r+0x1c>
 80053ec:	42a9      	cmp	r1, r5
 80053ee:	d904      	bls.n	80053fa <_malloc_r+0x26>
 80053f0:	230c      	movs	r3, #12
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	2000      	movs	r0, #0
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054d0 <_malloc_r+0xfc>
 80053fe:	f000 f869 	bl	80054d4 <__malloc_lock>
 8005402:	f8d8 3000 	ldr.w	r3, [r8]
 8005406:	461c      	mov	r4, r3
 8005408:	bb44      	cbnz	r4, 800545c <_malloc_r+0x88>
 800540a:	4629      	mov	r1, r5
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff ffbf 	bl	8005390 <sbrk_aligned>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	4604      	mov	r4, r0
 8005416:	d158      	bne.n	80054ca <_malloc_r+0xf6>
 8005418:	f8d8 4000 	ldr.w	r4, [r8]
 800541c:	4627      	mov	r7, r4
 800541e:	2f00      	cmp	r7, #0
 8005420:	d143      	bne.n	80054aa <_malloc_r+0xd6>
 8005422:	2c00      	cmp	r4, #0
 8005424:	d04b      	beq.n	80054be <_malloc_r+0xea>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	4639      	mov	r1, r7
 800542a:	4630      	mov	r0, r6
 800542c:	eb04 0903 	add.w	r9, r4, r3
 8005430:	f000 fc18 	bl	8005c64 <_sbrk_r>
 8005434:	4581      	cmp	r9, r0
 8005436:	d142      	bne.n	80054be <_malloc_r+0xea>
 8005438:	6821      	ldr	r1, [r4, #0]
 800543a:	1a6d      	subs	r5, r5, r1
 800543c:	4629      	mov	r1, r5
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff ffa6 	bl	8005390 <sbrk_aligned>
 8005444:	3001      	adds	r0, #1
 8005446:	d03a      	beq.n	80054be <_malloc_r+0xea>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	442b      	add	r3, r5
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	f8d8 3000 	ldr.w	r3, [r8]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	bb62      	cbnz	r2, 80054b0 <_malloc_r+0xdc>
 8005456:	f8c8 7000 	str.w	r7, [r8]
 800545a:	e00f      	b.n	800547c <_malloc_r+0xa8>
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	1b52      	subs	r2, r2, r5
 8005460:	d420      	bmi.n	80054a4 <_malloc_r+0xd0>
 8005462:	2a0b      	cmp	r2, #11
 8005464:	d917      	bls.n	8005496 <_malloc_r+0xc2>
 8005466:	1961      	adds	r1, r4, r5
 8005468:	42a3      	cmp	r3, r4
 800546a:	6025      	str	r5, [r4, #0]
 800546c:	bf18      	it	ne
 800546e:	6059      	strne	r1, [r3, #4]
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	bf08      	it	eq
 8005474:	f8c8 1000 	streq.w	r1, [r8]
 8005478:	5162      	str	r2, [r4, r5]
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	4630      	mov	r0, r6
 800547e:	f000 f82f 	bl	80054e0 <__malloc_unlock>
 8005482:	f104 000b 	add.w	r0, r4, #11
 8005486:	1d23      	adds	r3, r4, #4
 8005488:	f020 0007 	bic.w	r0, r0, #7
 800548c:	1ac2      	subs	r2, r0, r3
 800548e:	bf1c      	itt	ne
 8005490:	1a1b      	subne	r3, r3, r0
 8005492:	50a3      	strne	r3, [r4, r2]
 8005494:	e7af      	b.n	80053f6 <_malloc_r+0x22>
 8005496:	6862      	ldr	r2, [r4, #4]
 8005498:	42a3      	cmp	r3, r4
 800549a:	bf0c      	ite	eq
 800549c:	f8c8 2000 	streq.w	r2, [r8]
 80054a0:	605a      	strne	r2, [r3, #4]
 80054a2:	e7eb      	b.n	800547c <_malloc_r+0xa8>
 80054a4:	4623      	mov	r3, r4
 80054a6:	6864      	ldr	r4, [r4, #4]
 80054a8:	e7ae      	b.n	8005408 <_malloc_r+0x34>
 80054aa:	463c      	mov	r4, r7
 80054ac:	687f      	ldr	r7, [r7, #4]
 80054ae:	e7b6      	b.n	800541e <_malloc_r+0x4a>
 80054b0:	461a      	mov	r2, r3
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d1fb      	bne.n	80054b0 <_malloc_r+0xdc>
 80054b8:	2300      	movs	r3, #0
 80054ba:	6053      	str	r3, [r2, #4]
 80054bc:	e7de      	b.n	800547c <_malloc_r+0xa8>
 80054be:	230c      	movs	r3, #12
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f80c 	bl	80054e0 <__malloc_unlock>
 80054c8:	e794      	b.n	80053f4 <_malloc_r+0x20>
 80054ca:	6005      	str	r5, [r0, #0]
 80054cc:	e7d6      	b.n	800547c <_malloc_r+0xa8>
 80054ce:	bf00      	nop
 80054d0:	200002c0 	.word	0x200002c0

080054d4 <__malloc_lock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	@ (80054dc <__malloc_lock+0x8>)
 80054d6:	f7ff bee8 	b.w	80052aa <__retarget_lock_acquire_recursive>
 80054da:	bf00      	nop
 80054dc:	200002b8 	.word	0x200002b8

080054e0 <__malloc_unlock>:
 80054e0:	4801      	ldr	r0, [pc, #4]	@ (80054e8 <__malloc_unlock+0x8>)
 80054e2:	f7ff bee3 	b.w	80052ac <__retarget_lock_release_recursive>
 80054e6:	bf00      	nop
 80054e8:	200002b8 	.word	0x200002b8

080054ec <__ssputs_r>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	688e      	ldr	r6, [r1, #8]
 80054f2:	461f      	mov	r7, r3
 80054f4:	42be      	cmp	r6, r7
 80054f6:	680b      	ldr	r3, [r1, #0]
 80054f8:	4682      	mov	sl, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	4690      	mov	r8, r2
 80054fe:	d82d      	bhi.n	800555c <__ssputs_r+0x70>
 8005500:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005504:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005508:	d026      	beq.n	8005558 <__ssputs_r+0x6c>
 800550a:	6965      	ldr	r5, [r4, #20]
 800550c:	6909      	ldr	r1, [r1, #16]
 800550e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005512:	eba3 0901 	sub.w	r9, r3, r1
 8005516:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800551a:	1c7b      	adds	r3, r7, #1
 800551c:	444b      	add	r3, r9
 800551e:	106d      	asrs	r5, r5, #1
 8005520:	429d      	cmp	r5, r3
 8005522:	bf38      	it	cc
 8005524:	461d      	movcc	r5, r3
 8005526:	0553      	lsls	r3, r2, #21
 8005528:	d527      	bpl.n	800557a <__ssputs_r+0x8e>
 800552a:	4629      	mov	r1, r5
 800552c:	f7ff ff52 	bl	80053d4 <_malloc_r>
 8005530:	4606      	mov	r6, r0
 8005532:	b360      	cbz	r0, 800558e <__ssputs_r+0xa2>
 8005534:	6921      	ldr	r1, [r4, #16]
 8005536:	464a      	mov	r2, r9
 8005538:	f000 fba4 	bl	8005c84 <memcpy>
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	6126      	str	r6, [r4, #16]
 800554a:	6165      	str	r5, [r4, #20]
 800554c:	444e      	add	r6, r9
 800554e:	eba5 0509 	sub.w	r5, r5, r9
 8005552:	6026      	str	r6, [r4, #0]
 8005554:	60a5      	str	r5, [r4, #8]
 8005556:	463e      	mov	r6, r7
 8005558:	42be      	cmp	r6, r7
 800555a:	d900      	bls.n	800555e <__ssputs_r+0x72>
 800555c:	463e      	mov	r6, r7
 800555e:	6820      	ldr	r0, [r4, #0]
 8005560:	4632      	mov	r2, r6
 8005562:	4641      	mov	r1, r8
 8005564:	f000 fb64 	bl	8005c30 <memmove>
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	1b9b      	subs	r3, r3, r6
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	4433      	add	r3, r6
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	2000      	movs	r0, #0
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	462a      	mov	r2, r5
 800557c:	f000 fb97 	bl	8005cae <_realloc_r>
 8005580:	4606      	mov	r6, r0
 8005582:	2800      	cmp	r0, #0
 8005584:	d1e0      	bne.n	8005548 <__ssputs_r+0x5c>
 8005586:	6921      	ldr	r1, [r4, #16]
 8005588:	4650      	mov	r0, sl
 800558a:	f7ff feaf 	bl	80052ec <_free_r>
 800558e:	230c      	movs	r3, #12
 8005590:	f8ca 3000 	str.w	r3, [sl]
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e7e9      	b.n	8005576 <__ssputs_r+0x8a>
	...

080055a4 <_svfiprintf_r>:
 80055a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	4698      	mov	r8, r3
 80055aa:	898b      	ldrh	r3, [r1, #12]
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	b09d      	sub	sp, #116	@ 0x74
 80055b0:	4607      	mov	r7, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	d510      	bpl.n	80055da <_svfiprintf_r+0x36>
 80055b8:	690b      	ldr	r3, [r1, #16]
 80055ba:	b973      	cbnz	r3, 80055da <_svfiprintf_r+0x36>
 80055bc:	2140      	movs	r1, #64	@ 0x40
 80055be:	f7ff ff09 	bl	80053d4 <_malloc_r>
 80055c2:	6028      	str	r0, [r5, #0]
 80055c4:	6128      	str	r0, [r5, #16]
 80055c6:	b930      	cbnz	r0, 80055d6 <_svfiprintf_r+0x32>
 80055c8:	230c      	movs	r3, #12
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	b01d      	add	sp, #116	@ 0x74
 80055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d6:	2340      	movs	r3, #64	@ 0x40
 80055d8:	616b      	str	r3, [r5, #20]
 80055da:	2300      	movs	r3, #0
 80055dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80055de:	2320      	movs	r3, #32
 80055e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055e8:	2330      	movs	r3, #48	@ 0x30
 80055ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005788 <_svfiprintf_r+0x1e4>
 80055ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055f2:	f04f 0901 	mov.w	r9, #1
 80055f6:	4623      	mov	r3, r4
 80055f8:	469a      	mov	sl, r3
 80055fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055fe:	b10a      	cbz	r2, 8005604 <_svfiprintf_r+0x60>
 8005600:	2a25      	cmp	r2, #37	@ 0x25
 8005602:	d1f9      	bne.n	80055f8 <_svfiprintf_r+0x54>
 8005604:	ebba 0b04 	subs.w	fp, sl, r4
 8005608:	d00b      	beq.n	8005622 <_svfiprintf_r+0x7e>
 800560a:	465b      	mov	r3, fp
 800560c:	4622      	mov	r2, r4
 800560e:	4629      	mov	r1, r5
 8005610:	4638      	mov	r0, r7
 8005612:	f7ff ff6b 	bl	80054ec <__ssputs_r>
 8005616:	3001      	adds	r0, #1
 8005618:	f000 80a7 	beq.w	800576a <_svfiprintf_r+0x1c6>
 800561c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800561e:	445a      	add	r2, fp
 8005620:	9209      	str	r2, [sp, #36]	@ 0x24
 8005622:	f89a 3000 	ldrb.w	r3, [sl]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 809f 	beq.w	800576a <_svfiprintf_r+0x1c6>
 800562c:	2300      	movs	r3, #0
 800562e:	f04f 32ff 	mov.w	r2, #4294967295
 8005632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005636:	f10a 0a01 	add.w	sl, sl, #1
 800563a:	9304      	str	r3, [sp, #16]
 800563c:	9307      	str	r3, [sp, #28]
 800563e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005642:	931a      	str	r3, [sp, #104]	@ 0x68
 8005644:	4654      	mov	r4, sl
 8005646:	2205      	movs	r2, #5
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	484e      	ldr	r0, [pc, #312]	@ (8005788 <_svfiprintf_r+0x1e4>)
 800564e:	f7fa fde7 	bl	8000220 <memchr>
 8005652:	9a04      	ldr	r2, [sp, #16]
 8005654:	b9d8      	cbnz	r0, 800568e <_svfiprintf_r+0xea>
 8005656:	06d0      	lsls	r0, r2, #27
 8005658:	bf44      	itt	mi
 800565a:	2320      	movmi	r3, #32
 800565c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005660:	0711      	lsls	r1, r2, #28
 8005662:	bf44      	itt	mi
 8005664:	232b      	movmi	r3, #43	@ 0x2b
 8005666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800566a:	f89a 3000 	ldrb.w	r3, [sl]
 800566e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005670:	d015      	beq.n	800569e <_svfiprintf_r+0xfa>
 8005672:	9a07      	ldr	r2, [sp, #28]
 8005674:	4654      	mov	r4, sl
 8005676:	2000      	movs	r0, #0
 8005678:	f04f 0c0a 	mov.w	ip, #10
 800567c:	4621      	mov	r1, r4
 800567e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005682:	3b30      	subs	r3, #48	@ 0x30
 8005684:	2b09      	cmp	r3, #9
 8005686:	d94b      	bls.n	8005720 <_svfiprintf_r+0x17c>
 8005688:	b1b0      	cbz	r0, 80056b8 <_svfiprintf_r+0x114>
 800568a:	9207      	str	r2, [sp, #28]
 800568c:	e014      	b.n	80056b8 <_svfiprintf_r+0x114>
 800568e:	eba0 0308 	sub.w	r3, r0, r8
 8005692:	fa09 f303 	lsl.w	r3, r9, r3
 8005696:	4313      	orrs	r3, r2
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	46a2      	mov	sl, r4
 800569c:	e7d2      	b.n	8005644 <_svfiprintf_r+0xa0>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	1d19      	adds	r1, r3, #4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	9103      	str	r1, [sp, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bfbb      	ittet	lt
 80056aa:	425b      	neglt	r3, r3
 80056ac:	f042 0202 	orrlt.w	r2, r2, #2
 80056b0:	9307      	strge	r3, [sp, #28]
 80056b2:	9307      	strlt	r3, [sp, #28]
 80056b4:	bfb8      	it	lt
 80056b6:	9204      	strlt	r2, [sp, #16]
 80056b8:	7823      	ldrb	r3, [r4, #0]
 80056ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80056bc:	d10a      	bne.n	80056d4 <_svfiprintf_r+0x130>
 80056be:	7863      	ldrb	r3, [r4, #1]
 80056c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c2:	d132      	bne.n	800572a <_svfiprintf_r+0x186>
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	1d1a      	adds	r2, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	9203      	str	r2, [sp, #12]
 80056cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056d0:	3402      	adds	r4, #2
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005798 <_svfiprintf_r+0x1f4>
 80056d8:	7821      	ldrb	r1, [r4, #0]
 80056da:	2203      	movs	r2, #3
 80056dc:	4650      	mov	r0, sl
 80056de:	f7fa fd9f 	bl	8000220 <memchr>
 80056e2:	b138      	cbz	r0, 80056f4 <_svfiprintf_r+0x150>
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	eba0 000a 	sub.w	r0, r0, sl
 80056ea:	2240      	movs	r2, #64	@ 0x40
 80056ec:	4082      	lsls	r2, r0
 80056ee:	4313      	orrs	r3, r2
 80056f0:	3401      	adds	r4, #1
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	4824      	ldr	r0, [pc, #144]	@ (800578c <_svfiprintf_r+0x1e8>)
 80056fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056fe:	2206      	movs	r2, #6
 8005700:	f7fa fd8e 	bl	8000220 <memchr>
 8005704:	2800      	cmp	r0, #0
 8005706:	d036      	beq.n	8005776 <_svfiprintf_r+0x1d2>
 8005708:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <_svfiprintf_r+0x1ec>)
 800570a:	bb1b      	cbnz	r3, 8005754 <_svfiprintf_r+0x1b0>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	3307      	adds	r3, #7
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	3308      	adds	r3, #8
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571a:	4433      	add	r3, r6
 800571c:	9309      	str	r3, [sp, #36]	@ 0x24
 800571e:	e76a      	b.n	80055f6 <_svfiprintf_r+0x52>
 8005720:	fb0c 3202 	mla	r2, ip, r2, r3
 8005724:	460c      	mov	r4, r1
 8005726:	2001      	movs	r0, #1
 8005728:	e7a8      	b.n	800567c <_svfiprintf_r+0xd8>
 800572a:	2300      	movs	r3, #0
 800572c:	3401      	adds	r4, #1
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	4619      	mov	r1, r3
 8005732:	f04f 0c0a 	mov.w	ip, #10
 8005736:	4620      	mov	r0, r4
 8005738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800573c:	3a30      	subs	r2, #48	@ 0x30
 800573e:	2a09      	cmp	r2, #9
 8005740:	d903      	bls.n	800574a <_svfiprintf_r+0x1a6>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0c6      	beq.n	80056d4 <_svfiprintf_r+0x130>
 8005746:	9105      	str	r1, [sp, #20]
 8005748:	e7c4      	b.n	80056d4 <_svfiprintf_r+0x130>
 800574a:	fb0c 2101 	mla	r1, ip, r1, r2
 800574e:	4604      	mov	r4, r0
 8005750:	2301      	movs	r3, #1
 8005752:	e7f0      	b.n	8005736 <_svfiprintf_r+0x192>
 8005754:	ab03      	add	r3, sp, #12
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	462a      	mov	r2, r5
 800575a:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <_svfiprintf_r+0x1f0>)
 800575c:	a904      	add	r1, sp, #16
 800575e:	4638      	mov	r0, r7
 8005760:	f3af 8000 	nop.w
 8005764:	1c42      	adds	r2, r0, #1
 8005766:	4606      	mov	r6, r0
 8005768:	d1d6      	bne.n	8005718 <_svfiprintf_r+0x174>
 800576a:	89ab      	ldrh	r3, [r5, #12]
 800576c:	065b      	lsls	r3, r3, #25
 800576e:	f53f af2d 	bmi.w	80055cc <_svfiprintf_r+0x28>
 8005772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005774:	e72c      	b.n	80055d0 <_svfiprintf_r+0x2c>
 8005776:	ab03      	add	r3, sp, #12
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	462a      	mov	r2, r5
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <_svfiprintf_r+0x1f0>)
 800577e:	a904      	add	r1, sp, #16
 8005780:	4638      	mov	r0, r7
 8005782:	f000 f879 	bl	8005878 <_printf_i>
 8005786:	e7ed      	b.n	8005764 <_svfiprintf_r+0x1c0>
 8005788:	080063d3 	.word	0x080063d3
 800578c:	080063dd 	.word	0x080063dd
 8005790:	00000000 	.word	0x00000000
 8005794:	080054ed 	.word	0x080054ed
 8005798:	080063d9 	.word	0x080063d9

0800579c <_printf_common>:
 800579c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	4616      	mov	r6, r2
 80057a2:	4698      	mov	r8, r3
 80057a4:	688a      	ldr	r2, [r1, #8]
 80057a6:	690b      	ldr	r3, [r1, #16]
 80057a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bfb8      	it	lt
 80057b0:	4613      	movlt	r3, r2
 80057b2:	6033      	str	r3, [r6, #0]
 80057b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057b8:	4607      	mov	r7, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	b10a      	cbz	r2, 80057c2 <_printf_common+0x26>
 80057be:	3301      	adds	r3, #1
 80057c0:	6033      	str	r3, [r6, #0]
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	0699      	lsls	r1, r3, #26
 80057c6:	bf42      	ittt	mi
 80057c8:	6833      	ldrmi	r3, [r6, #0]
 80057ca:	3302      	addmi	r3, #2
 80057cc:	6033      	strmi	r3, [r6, #0]
 80057ce:	6825      	ldr	r5, [r4, #0]
 80057d0:	f015 0506 	ands.w	r5, r5, #6
 80057d4:	d106      	bne.n	80057e4 <_printf_common+0x48>
 80057d6:	f104 0a19 	add.w	sl, r4, #25
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	6832      	ldr	r2, [r6, #0]
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	42ab      	cmp	r3, r5
 80057e2:	dc26      	bgt.n	8005832 <_printf_common+0x96>
 80057e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057e8:	6822      	ldr	r2, [r4, #0]
 80057ea:	3b00      	subs	r3, #0
 80057ec:	bf18      	it	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	0692      	lsls	r2, r2, #26
 80057f2:	d42b      	bmi.n	800584c <_printf_common+0xb0>
 80057f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057f8:	4641      	mov	r1, r8
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c8      	blx	r9
 80057fe:	3001      	adds	r0, #1
 8005800:	d01e      	beq.n	8005840 <_printf_common+0xa4>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	f003 0306 	and.w	r3, r3, #6
 800580a:	2b04      	cmp	r3, #4
 800580c:	bf02      	ittt	eq
 800580e:	68e5      	ldreq	r5, [r4, #12]
 8005810:	6833      	ldreq	r3, [r6, #0]
 8005812:	1aed      	subeq	r5, r5, r3
 8005814:	68a3      	ldr	r3, [r4, #8]
 8005816:	bf0c      	ite	eq
 8005818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800581c:	2500      	movne	r5, #0
 800581e:	4293      	cmp	r3, r2
 8005820:	bfc4      	itt	gt
 8005822:	1a9b      	subgt	r3, r3, r2
 8005824:	18ed      	addgt	r5, r5, r3
 8005826:	2600      	movs	r6, #0
 8005828:	341a      	adds	r4, #26
 800582a:	42b5      	cmp	r5, r6
 800582c:	d11a      	bne.n	8005864 <_printf_common+0xc8>
 800582e:	2000      	movs	r0, #0
 8005830:	e008      	b.n	8005844 <_printf_common+0xa8>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4641      	mov	r1, r8
 8005838:	4638      	mov	r0, r7
 800583a:	47c8      	blx	r9
 800583c:	3001      	adds	r0, #1
 800583e:	d103      	bne.n	8005848 <_printf_common+0xac>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	3501      	adds	r5, #1
 800584a:	e7c6      	b.n	80057da <_printf_common+0x3e>
 800584c:	18e1      	adds	r1, r4, r3
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	2030      	movs	r0, #48	@ 0x30
 8005852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005856:	4422      	add	r2, r4
 8005858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800585c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005860:	3302      	adds	r3, #2
 8005862:	e7c7      	b.n	80057f4 <_printf_common+0x58>
 8005864:	2301      	movs	r3, #1
 8005866:	4622      	mov	r2, r4
 8005868:	4641      	mov	r1, r8
 800586a:	4638      	mov	r0, r7
 800586c:	47c8      	blx	r9
 800586e:	3001      	adds	r0, #1
 8005870:	d0e6      	beq.n	8005840 <_printf_common+0xa4>
 8005872:	3601      	adds	r6, #1
 8005874:	e7d9      	b.n	800582a <_printf_common+0x8e>
	...

08005878 <_printf_i>:
 8005878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	7e0f      	ldrb	r7, [r1, #24]
 800587e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005880:	2f78      	cmp	r7, #120	@ 0x78
 8005882:	4691      	mov	r9, r2
 8005884:	4680      	mov	r8, r0
 8005886:	460c      	mov	r4, r1
 8005888:	469a      	mov	sl, r3
 800588a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800588e:	d807      	bhi.n	80058a0 <_printf_i+0x28>
 8005890:	2f62      	cmp	r7, #98	@ 0x62
 8005892:	d80a      	bhi.n	80058aa <_printf_i+0x32>
 8005894:	2f00      	cmp	r7, #0
 8005896:	f000 80d1 	beq.w	8005a3c <_printf_i+0x1c4>
 800589a:	2f58      	cmp	r7, #88	@ 0x58
 800589c:	f000 80b8 	beq.w	8005a10 <_printf_i+0x198>
 80058a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058a8:	e03a      	b.n	8005920 <_printf_i+0xa8>
 80058aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ae:	2b15      	cmp	r3, #21
 80058b0:	d8f6      	bhi.n	80058a0 <_printf_i+0x28>
 80058b2:	a101      	add	r1, pc, #4	@ (adr r1, 80058b8 <_printf_i+0x40>)
 80058b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058b8:	08005911 	.word	0x08005911
 80058bc:	08005925 	.word	0x08005925
 80058c0:	080058a1 	.word	0x080058a1
 80058c4:	080058a1 	.word	0x080058a1
 80058c8:	080058a1 	.word	0x080058a1
 80058cc:	080058a1 	.word	0x080058a1
 80058d0:	08005925 	.word	0x08005925
 80058d4:	080058a1 	.word	0x080058a1
 80058d8:	080058a1 	.word	0x080058a1
 80058dc:	080058a1 	.word	0x080058a1
 80058e0:	080058a1 	.word	0x080058a1
 80058e4:	08005a23 	.word	0x08005a23
 80058e8:	0800594f 	.word	0x0800594f
 80058ec:	080059dd 	.word	0x080059dd
 80058f0:	080058a1 	.word	0x080058a1
 80058f4:	080058a1 	.word	0x080058a1
 80058f8:	08005a45 	.word	0x08005a45
 80058fc:	080058a1 	.word	0x080058a1
 8005900:	0800594f 	.word	0x0800594f
 8005904:	080058a1 	.word	0x080058a1
 8005908:	080058a1 	.word	0x080058a1
 800590c:	080059e5 	.word	0x080059e5
 8005910:	6833      	ldr	r3, [r6, #0]
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6032      	str	r2, [r6, #0]
 8005918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800591c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005920:	2301      	movs	r3, #1
 8005922:	e09c      	b.n	8005a5e <_printf_i+0x1e6>
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	1d19      	adds	r1, r3, #4
 800592a:	6031      	str	r1, [r6, #0]
 800592c:	0606      	lsls	r6, r0, #24
 800592e:	d501      	bpl.n	8005934 <_printf_i+0xbc>
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	e003      	b.n	800593c <_printf_i+0xc4>
 8005934:	0645      	lsls	r5, r0, #25
 8005936:	d5fb      	bpl.n	8005930 <_printf_i+0xb8>
 8005938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800593c:	2d00      	cmp	r5, #0
 800593e:	da03      	bge.n	8005948 <_printf_i+0xd0>
 8005940:	232d      	movs	r3, #45	@ 0x2d
 8005942:	426d      	negs	r5, r5
 8005944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005948:	4858      	ldr	r0, [pc, #352]	@ (8005aac <_printf_i+0x234>)
 800594a:	230a      	movs	r3, #10
 800594c:	e011      	b.n	8005972 <_printf_i+0xfa>
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	0608      	lsls	r0, r1, #24
 8005954:	f853 5b04 	ldr.w	r5, [r3], #4
 8005958:	d402      	bmi.n	8005960 <_printf_i+0xe8>
 800595a:	0649      	lsls	r1, r1, #25
 800595c:	bf48      	it	mi
 800595e:	b2ad      	uxthmi	r5, r5
 8005960:	2f6f      	cmp	r7, #111	@ 0x6f
 8005962:	4852      	ldr	r0, [pc, #328]	@ (8005aac <_printf_i+0x234>)
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	bf14      	ite	ne
 8005968:	230a      	movne	r3, #10
 800596a:	2308      	moveq	r3, #8
 800596c:	2100      	movs	r1, #0
 800596e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005972:	6866      	ldr	r6, [r4, #4]
 8005974:	60a6      	str	r6, [r4, #8]
 8005976:	2e00      	cmp	r6, #0
 8005978:	db05      	blt.n	8005986 <_printf_i+0x10e>
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	432e      	orrs	r6, r5
 800597e:	f021 0104 	bic.w	r1, r1, #4
 8005982:	6021      	str	r1, [r4, #0]
 8005984:	d04b      	beq.n	8005a1e <_printf_i+0x1a6>
 8005986:	4616      	mov	r6, r2
 8005988:	fbb5 f1f3 	udiv	r1, r5, r3
 800598c:	fb03 5711 	mls	r7, r3, r1, r5
 8005990:	5dc7      	ldrb	r7, [r0, r7]
 8005992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005996:	462f      	mov	r7, r5
 8005998:	42bb      	cmp	r3, r7
 800599a:	460d      	mov	r5, r1
 800599c:	d9f4      	bls.n	8005988 <_printf_i+0x110>
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d10b      	bne.n	80059ba <_printf_i+0x142>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	07df      	lsls	r7, r3, #31
 80059a6:	d508      	bpl.n	80059ba <_printf_i+0x142>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6861      	ldr	r1, [r4, #4]
 80059ac:	4299      	cmp	r1, r3
 80059ae:	bfde      	ittt	le
 80059b0:	2330      	movle	r3, #48	@ 0x30
 80059b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059ba:	1b92      	subs	r2, r2, r6
 80059bc:	6122      	str	r2, [r4, #16]
 80059be:	f8cd a000 	str.w	sl, [sp]
 80059c2:	464b      	mov	r3, r9
 80059c4:	aa03      	add	r2, sp, #12
 80059c6:	4621      	mov	r1, r4
 80059c8:	4640      	mov	r0, r8
 80059ca:	f7ff fee7 	bl	800579c <_printf_common>
 80059ce:	3001      	adds	r0, #1
 80059d0:	d14a      	bne.n	8005a68 <_printf_i+0x1f0>
 80059d2:	f04f 30ff 	mov.w	r0, #4294967295
 80059d6:	b004      	add	sp, #16
 80059d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	f043 0320 	orr.w	r3, r3, #32
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	4832      	ldr	r0, [pc, #200]	@ (8005ab0 <_printf_i+0x238>)
 80059e6:	2778      	movs	r7, #120	@ 0x78
 80059e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	6831      	ldr	r1, [r6, #0]
 80059f0:	061f      	lsls	r7, r3, #24
 80059f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80059f6:	d402      	bmi.n	80059fe <_printf_i+0x186>
 80059f8:	065f      	lsls	r7, r3, #25
 80059fa:	bf48      	it	mi
 80059fc:	b2ad      	uxthmi	r5, r5
 80059fe:	6031      	str	r1, [r6, #0]
 8005a00:	07d9      	lsls	r1, r3, #31
 8005a02:	bf44      	itt	mi
 8005a04:	f043 0320 	orrmi.w	r3, r3, #32
 8005a08:	6023      	strmi	r3, [r4, #0]
 8005a0a:	b11d      	cbz	r5, 8005a14 <_printf_i+0x19c>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	e7ad      	b.n	800596c <_printf_i+0xf4>
 8005a10:	4826      	ldr	r0, [pc, #152]	@ (8005aac <_printf_i+0x234>)
 8005a12:	e7e9      	b.n	80059e8 <_printf_i+0x170>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	f023 0320 	bic.w	r3, r3, #32
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	e7f6      	b.n	8005a0c <_printf_i+0x194>
 8005a1e:	4616      	mov	r6, r2
 8005a20:	e7bd      	b.n	800599e <_printf_i+0x126>
 8005a22:	6833      	ldr	r3, [r6, #0]
 8005a24:	6825      	ldr	r5, [r4, #0]
 8005a26:	6961      	ldr	r1, [r4, #20]
 8005a28:	1d18      	adds	r0, r3, #4
 8005a2a:	6030      	str	r0, [r6, #0]
 8005a2c:	062e      	lsls	r6, r5, #24
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	d501      	bpl.n	8005a36 <_printf_i+0x1be>
 8005a32:	6019      	str	r1, [r3, #0]
 8005a34:	e002      	b.n	8005a3c <_printf_i+0x1c4>
 8005a36:	0668      	lsls	r0, r5, #25
 8005a38:	d5fb      	bpl.n	8005a32 <_printf_i+0x1ba>
 8005a3a:	8019      	strh	r1, [r3, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6123      	str	r3, [r4, #16]
 8005a40:	4616      	mov	r6, r2
 8005a42:	e7bc      	b.n	80059be <_printf_i+0x146>
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	1d1a      	adds	r2, r3, #4
 8005a48:	6032      	str	r2, [r6, #0]
 8005a4a:	681e      	ldr	r6, [r3, #0]
 8005a4c:	6862      	ldr	r2, [r4, #4]
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4630      	mov	r0, r6
 8005a52:	f7fa fbe5 	bl	8000220 <memchr>
 8005a56:	b108      	cbz	r0, 8005a5c <_printf_i+0x1e4>
 8005a58:	1b80      	subs	r0, r0, r6
 8005a5a:	6060      	str	r0, [r4, #4]
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	2300      	movs	r3, #0
 8005a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a66:	e7aa      	b.n	80059be <_printf_i+0x146>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	4632      	mov	r2, r6
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	4640      	mov	r0, r8
 8005a70:	47d0      	blx	sl
 8005a72:	3001      	adds	r0, #1
 8005a74:	d0ad      	beq.n	80059d2 <_printf_i+0x15a>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	079b      	lsls	r3, r3, #30
 8005a7a:	d413      	bmi.n	8005aa4 <_printf_i+0x22c>
 8005a7c:	68e0      	ldr	r0, [r4, #12]
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	4298      	cmp	r0, r3
 8005a82:	bfb8      	it	lt
 8005a84:	4618      	movlt	r0, r3
 8005a86:	e7a6      	b.n	80059d6 <_printf_i+0x15e>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4640      	mov	r0, r8
 8005a90:	47d0      	blx	sl
 8005a92:	3001      	adds	r0, #1
 8005a94:	d09d      	beq.n	80059d2 <_printf_i+0x15a>
 8005a96:	3501      	adds	r5, #1
 8005a98:	68e3      	ldr	r3, [r4, #12]
 8005a9a:	9903      	ldr	r1, [sp, #12]
 8005a9c:	1a5b      	subs	r3, r3, r1
 8005a9e:	42ab      	cmp	r3, r5
 8005aa0:	dcf2      	bgt.n	8005a88 <_printf_i+0x210>
 8005aa2:	e7eb      	b.n	8005a7c <_printf_i+0x204>
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	f104 0619 	add.w	r6, r4, #25
 8005aaa:	e7f5      	b.n	8005a98 <_printf_i+0x220>
 8005aac:	080063e4 	.word	0x080063e4
 8005ab0:	080063f5 	.word	0x080063f5

08005ab4 <__sflush_r>:
 8005ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005abc:	0716      	lsls	r6, r2, #28
 8005abe:	4605      	mov	r5, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	d454      	bmi.n	8005b6e <__sflush_r+0xba>
 8005ac4:	684b      	ldr	r3, [r1, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	dc02      	bgt.n	8005ad0 <__sflush_r+0x1c>
 8005aca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	dd48      	ble.n	8005b62 <__sflush_r+0xae>
 8005ad0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ad2:	2e00      	cmp	r6, #0
 8005ad4:	d045      	beq.n	8005b62 <__sflush_r+0xae>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005adc:	682f      	ldr	r7, [r5, #0]
 8005ade:	6a21      	ldr	r1, [r4, #32]
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	d030      	beq.n	8005b46 <__sflush_r+0x92>
 8005ae4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	0759      	lsls	r1, r3, #29
 8005aea:	d505      	bpl.n	8005af8 <__sflush_r+0x44>
 8005aec:	6863      	ldr	r3, [r4, #4]
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005af2:	b10b      	cbz	r3, 8005af8 <__sflush_r+0x44>
 8005af4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005afc:	6a21      	ldr	r1, [r4, #32]
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b0      	blx	r6
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	d106      	bne.n	8005b16 <__sflush_r+0x62>
 8005b08:	6829      	ldr	r1, [r5, #0]
 8005b0a:	291d      	cmp	r1, #29
 8005b0c:	d82b      	bhi.n	8005b66 <__sflush_r+0xb2>
 8005b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb8 <__sflush_r+0x104>)
 8005b10:	40ca      	lsrs	r2, r1
 8005b12:	07d6      	lsls	r6, r2, #31
 8005b14:	d527      	bpl.n	8005b66 <__sflush_r+0xb2>
 8005b16:	2200      	movs	r2, #0
 8005b18:	6062      	str	r2, [r4, #4]
 8005b1a:	04d9      	lsls	r1, r3, #19
 8005b1c:	6922      	ldr	r2, [r4, #16]
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	d504      	bpl.n	8005b2c <__sflush_r+0x78>
 8005b22:	1c42      	adds	r2, r0, #1
 8005b24:	d101      	bne.n	8005b2a <__sflush_r+0x76>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	b903      	cbnz	r3, 8005b2c <__sflush_r+0x78>
 8005b2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b2e:	602f      	str	r7, [r5, #0]
 8005b30:	b1b9      	cbz	r1, 8005b62 <__sflush_r+0xae>
 8005b32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b36:	4299      	cmp	r1, r3
 8005b38:	d002      	beq.n	8005b40 <__sflush_r+0x8c>
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f7ff fbd6 	bl	80052ec <_free_r>
 8005b40:	2300      	movs	r3, #0
 8005b42:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b44:	e00d      	b.n	8005b62 <__sflush_r+0xae>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b0      	blx	r6
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	1c50      	adds	r0, r2, #1
 8005b50:	d1c9      	bne.n	8005ae6 <__sflush_r+0x32>
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0c6      	beq.n	8005ae6 <__sflush_r+0x32>
 8005b58:	2b1d      	cmp	r3, #29
 8005b5a:	d001      	beq.n	8005b60 <__sflush_r+0xac>
 8005b5c:	2b16      	cmp	r3, #22
 8005b5e:	d11e      	bne.n	8005b9e <__sflush_r+0xea>
 8005b60:	602f      	str	r7, [r5, #0]
 8005b62:	2000      	movs	r0, #0
 8005b64:	e022      	b.n	8005bac <__sflush_r+0xf8>
 8005b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b6a:	b21b      	sxth	r3, r3
 8005b6c:	e01b      	b.n	8005ba6 <__sflush_r+0xf2>
 8005b6e:	690f      	ldr	r7, [r1, #16]
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	d0f6      	beq.n	8005b62 <__sflush_r+0xae>
 8005b74:	0793      	lsls	r3, r2, #30
 8005b76:	680e      	ldr	r6, [r1, #0]
 8005b78:	bf08      	it	eq
 8005b7a:	694b      	ldreq	r3, [r1, #20]
 8005b7c:	600f      	str	r7, [r1, #0]
 8005b7e:	bf18      	it	ne
 8005b80:	2300      	movne	r3, #0
 8005b82:	eba6 0807 	sub.w	r8, r6, r7
 8005b86:	608b      	str	r3, [r1, #8]
 8005b88:	f1b8 0f00 	cmp.w	r8, #0
 8005b8c:	dde9      	ble.n	8005b62 <__sflush_r+0xae>
 8005b8e:	6a21      	ldr	r1, [r4, #32]
 8005b90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b92:	4643      	mov	r3, r8
 8005b94:	463a      	mov	r2, r7
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b0      	blx	r6
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	dc08      	bgt.n	8005bb0 <__sflush_r+0xfc>
 8005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb0:	4407      	add	r7, r0
 8005bb2:	eba8 0800 	sub.w	r8, r8, r0
 8005bb6:	e7e7      	b.n	8005b88 <__sflush_r+0xd4>
 8005bb8:	20400001 	.word	0x20400001

08005bbc <_fflush_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	690b      	ldr	r3, [r1, #16]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	b913      	cbnz	r3, 8005bcc <_fflush_r+0x10>
 8005bc6:	2500      	movs	r5, #0
 8005bc8:	4628      	mov	r0, r5
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	b118      	cbz	r0, 8005bd6 <_fflush_r+0x1a>
 8005bce:	6a03      	ldr	r3, [r0, #32]
 8005bd0:	b90b      	cbnz	r3, 8005bd6 <_fflush_r+0x1a>
 8005bd2:	f7ff fa55 	bl	8005080 <__sinit>
 8005bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f3      	beq.n	8005bc6 <_fflush_r+0xa>
 8005bde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005be0:	07d0      	lsls	r0, r2, #31
 8005be2:	d404      	bmi.n	8005bee <_fflush_r+0x32>
 8005be4:	0599      	lsls	r1, r3, #22
 8005be6:	d402      	bmi.n	8005bee <_fflush_r+0x32>
 8005be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bea:	f7ff fb5e 	bl	80052aa <__retarget_lock_acquire_recursive>
 8005bee:	4628      	mov	r0, r5
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	f7ff ff5f 	bl	8005ab4 <__sflush_r>
 8005bf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bf8:	07da      	lsls	r2, r3, #31
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	d4e4      	bmi.n	8005bc8 <_fflush_r+0xc>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	059b      	lsls	r3, r3, #22
 8005c02:	d4e1      	bmi.n	8005bc8 <_fflush_r+0xc>
 8005c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c06:	f7ff fb51 	bl	80052ac <__retarget_lock_release_recursive>
 8005c0a:	e7dd      	b.n	8005bc8 <_fflush_r+0xc>

08005c0c <fiprintf>:
 8005c0c:	b40e      	push	{r1, r2, r3}
 8005c0e:	b503      	push	{r0, r1, lr}
 8005c10:	4601      	mov	r1, r0
 8005c12:	ab03      	add	r3, sp, #12
 8005c14:	4805      	ldr	r0, [pc, #20]	@ (8005c2c <fiprintf+0x20>)
 8005c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	f000 f89d 	bl	8005d5c <_vfiprintf_r>
 8005c22:	b002      	add	sp, #8
 8005c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c28:	b003      	add	sp, #12
 8005c2a:	4770      	bx	lr
 8005c2c:	2000001c 	.word	0x2000001c

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0402 	add.w	r4, r1, r2
 8005c38:	d902      	bls.n	8005c40 <memmove+0x10>
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	d807      	bhi.n	8005c50 <memmove+0x20>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	42a1      	cmp	r1, r4
 8005c44:	d008      	beq.n	8005c58 <memmove+0x28>
 8005c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4e:	e7f8      	b.n	8005c42 <memmove+0x12>
 8005c50:	4402      	add	r2, r0
 8005c52:	4601      	mov	r1, r0
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d100      	bne.n	8005c5a <memmove+0x2a>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c62:	e7f7      	b.n	8005c54 <memmove+0x24>

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d06      	ldr	r5, [pc, #24]	@ (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fb f864 	bl	8000d3c <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	200002b4 	.word	0x200002b4

08005c84 <memcpy>:
 8005c84:	440a      	add	r2, r1
 8005c86:	4291      	cmp	r1, r2
 8005c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c8c:	d100      	bne.n	8005c90 <memcpy+0xc>
 8005c8e:	4770      	bx	lr
 8005c90:	b510      	push	{r4, lr}
 8005c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	d1f9      	bne.n	8005c92 <memcpy+0xe>
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <abort>:
 8005ca0:	b508      	push	{r3, lr}
 8005ca2:	2006      	movs	r0, #6
 8005ca4:	f000 fa2e 	bl	8006104 <raise>
 8005ca8:	2001      	movs	r0, #1
 8005caa:	f7fa ffcf 	bl	8000c4c <_exit>

08005cae <_realloc_r>:
 8005cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	b921      	cbnz	r1, 8005cc4 <_realloc_r+0x16>
 8005cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	f7ff bb88 	b.w	80053d4 <_malloc_r>
 8005cc4:	b92a      	cbnz	r2, 8005cd2 <_realloc_r+0x24>
 8005cc6:	f7ff fb11 	bl	80052ec <_free_r>
 8005cca:	4625      	mov	r5, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd2:	f000 fa33 	bl	800613c <_malloc_usable_size_r>
 8005cd6:	4284      	cmp	r4, r0
 8005cd8:	4606      	mov	r6, r0
 8005cda:	d802      	bhi.n	8005ce2 <_realloc_r+0x34>
 8005cdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ce0:	d8f4      	bhi.n	8005ccc <_realloc_r+0x1e>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff fb75 	bl	80053d4 <_malloc_r>
 8005cea:	4680      	mov	r8, r0
 8005cec:	b908      	cbnz	r0, 8005cf2 <_realloc_r+0x44>
 8005cee:	4645      	mov	r5, r8
 8005cf0:	e7ec      	b.n	8005ccc <_realloc_r+0x1e>
 8005cf2:	42b4      	cmp	r4, r6
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	bf28      	it	cs
 8005cfa:	4632      	movcs	r2, r6
 8005cfc:	f7ff ffc2 	bl	8005c84 <memcpy>
 8005d00:	4629      	mov	r1, r5
 8005d02:	4638      	mov	r0, r7
 8005d04:	f7ff faf2 	bl	80052ec <_free_r>
 8005d08:	e7f1      	b.n	8005cee <_realloc_r+0x40>

08005d0a <__sfputc_r>:
 8005d0a:	6893      	ldr	r3, [r2, #8]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	b410      	push	{r4}
 8005d12:	6093      	str	r3, [r2, #8]
 8005d14:	da08      	bge.n	8005d28 <__sfputc_r+0x1e>
 8005d16:	6994      	ldr	r4, [r2, #24]
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	db01      	blt.n	8005d20 <__sfputc_r+0x16>
 8005d1c:	290a      	cmp	r1, #10
 8005d1e:	d103      	bne.n	8005d28 <__sfputc_r+0x1e>
 8005d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d24:	f000 b932 	b.w	8005f8c <__swbuf_r>
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	1c58      	adds	r0, r3, #1
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	7019      	strb	r1, [r3, #0]
 8005d30:	4608      	mov	r0, r1
 8005d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <__sfputs_r>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	4614      	mov	r4, r2
 8005d40:	18d5      	adds	r5, r2, r3
 8005d42:	42ac      	cmp	r4, r5
 8005d44:	d101      	bne.n	8005d4a <__sfputs_r+0x12>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e007      	b.n	8005d5a <__sfputs_r+0x22>
 8005d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4e:	463a      	mov	r2, r7
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7ff ffda 	bl	8005d0a <__sfputc_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d1f3      	bne.n	8005d42 <__sfputs_r+0xa>
 8005d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d5c <_vfiprintf_r>:
 8005d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	460d      	mov	r5, r1
 8005d62:	b09d      	sub	sp, #116	@ 0x74
 8005d64:	4614      	mov	r4, r2
 8005d66:	4698      	mov	r8, r3
 8005d68:	4606      	mov	r6, r0
 8005d6a:	b118      	cbz	r0, 8005d74 <_vfiprintf_r+0x18>
 8005d6c:	6a03      	ldr	r3, [r0, #32]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <_vfiprintf_r+0x18>
 8005d70:	f7ff f986 	bl	8005080 <__sinit>
 8005d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d76:	07d9      	lsls	r1, r3, #31
 8005d78:	d405      	bmi.n	8005d86 <_vfiprintf_r+0x2a>
 8005d7a:	89ab      	ldrh	r3, [r5, #12]
 8005d7c:	059a      	lsls	r2, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_vfiprintf_r+0x2a>
 8005d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d82:	f7ff fa92 	bl	80052aa <__retarget_lock_acquire_recursive>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	071b      	lsls	r3, r3, #28
 8005d8a:	d501      	bpl.n	8005d90 <_vfiprintf_r+0x34>
 8005d8c:	692b      	ldr	r3, [r5, #16]
 8005d8e:	b99b      	cbnz	r3, 8005db8 <_vfiprintf_r+0x5c>
 8005d90:	4629      	mov	r1, r5
 8005d92:	4630      	mov	r0, r6
 8005d94:	f000 f938 	bl	8006008 <__swsetup_r>
 8005d98:	b170      	cbz	r0, 8005db8 <_vfiprintf_r+0x5c>
 8005d9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d9c:	07dc      	lsls	r4, r3, #31
 8005d9e:	d504      	bpl.n	8005daa <_vfiprintf_r+0x4e>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	b01d      	add	sp, #116	@ 0x74
 8005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	0598      	lsls	r0, r3, #22
 8005dae:	d4f7      	bmi.n	8005da0 <_vfiprintf_r+0x44>
 8005db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005db2:	f7ff fa7b 	bl	80052ac <__retarget_lock_release_recursive>
 8005db6:	e7f3      	b.n	8005da0 <_vfiprintf_r+0x44>
 8005db8:	2300      	movs	r3, #0
 8005dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbc:	2320      	movs	r3, #32
 8005dbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dc6:	2330      	movs	r3, #48	@ 0x30
 8005dc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f78 <_vfiprintf_r+0x21c>
 8005dcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dd0:	f04f 0901 	mov.w	r9, #1
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	469a      	mov	sl, r3
 8005dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ddc:	b10a      	cbz	r2, 8005de2 <_vfiprintf_r+0x86>
 8005dde:	2a25      	cmp	r2, #37	@ 0x25
 8005de0:	d1f9      	bne.n	8005dd6 <_vfiprintf_r+0x7a>
 8005de2:	ebba 0b04 	subs.w	fp, sl, r4
 8005de6:	d00b      	beq.n	8005e00 <_vfiprintf_r+0xa4>
 8005de8:	465b      	mov	r3, fp
 8005dea:	4622      	mov	r2, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ffa2 	bl	8005d38 <__sfputs_r>
 8005df4:	3001      	adds	r0, #1
 8005df6:	f000 80a7 	beq.w	8005f48 <_vfiprintf_r+0x1ec>
 8005dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dfc:	445a      	add	r2, fp
 8005dfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e00:	f89a 3000 	ldrb.w	r3, [sl]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 809f 	beq.w	8005f48 <_vfiprintf_r+0x1ec>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e14:	f10a 0a01 	add.w	sl, sl, #1
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	9307      	str	r3, [sp, #28]
 8005e1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e20:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e22:	4654      	mov	r4, sl
 8005e24:	2205      	movs	r2, #5
 8005e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2a:	4853      	ldr	r0, [pc, #332]	@ (8005f78 <_vfiprintf_r+0x21c>)
 8005e2c:	f7fa f9f8 	bl	8000220 <memchr>
 8005e30:	9a04      	ldr	r2, [sp, #16]
 8005e32:	b9d8      	cbnz	r0, 8005e6c <_vfiprintf_r+0x110>
 8005e34:	06d1      	lsls	r1, r2, #27
 8005e36:	bf44      	itt	mi
 8005e38:	2320      	movmi	r3, #32
 8005e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e3e:	0713      	lsls	r3, r2, #28
 8005e40:	bf44      	itt	mi
 8005e42:	232b      	movmi	r3, #43	@ 0x2b
 8005e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e48:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e4e:	d015      	beq.n	8005e7c <_vfiprintf_r+0x120>
 8005e50:	9a07      	ldr	r2, [sp, #28]
 8005e52:	4654      	mov	r4, sl
 8005e54:	2000      	movs	r0, #0
 8005e56:	f04f 0c0a 	mov.w	ip, #10
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e60:	3b30      	subs	r3, #48	@ 0x30
 8005e62:	2b09      	cmp	r3, #9
 8005e64:	d94b      	bls.n	8005efe <_vfiprintf_r+0x1a2>
 8005e66:	b1b0      	cbz	r0, 8005e96 <_vfiprintf_r+0x13a>
 8005e68:	9207      	str	r2, [sp, #28]
 8005e6a:	e014      	b.n	8005e96 <_vfiprintf_r+0x13a>
 8005e6c:	eba0 0308 	sub.w	r3, r0, r8
 8005e70:	fa09 f303 	lsl.w	r3, r9, r3
 8005e74:	4313      	orrs	r3, r2
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	46a2      	mov	sl, r4
 8005e7a:	e7d2      	b.n	8005e22 <_vfiprintf_r+0xc6>
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	1d19      	adds	r1, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	9103      	str	r1, [sp, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bfbb      	ittet	lt
 8005e88:	425b      	neglt	r3, r3
 8005e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8005e8e:	9307      	strge	r3, [sp, #28]
 8005e90:	9307      	strlt	r3, [sp, #28]
 8005e92:	bfb8      	it	lt
 8005e94:	9204      	strlt	r2, [sp, #16]
 8005e96:	7823      	ldrb	r3, [r4, #0]
 8005e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e9a:	d10a      	bne.n	8005eb2 <_vfiprintf_r+0x156>
 8005e9c:	7863      	ldrb	r3, [r4, #1]
 8005e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ea0:	d132      	bne.n	8005f08 <_vfiprintf_r+0x1ac>
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	1d1a      	adds	r2, r3, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	9203      	str	r2, [sp, #12]
 8005eaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eae:	3402      	adds	r4, #2
 8005eb0:	9305      	str	r3, [sp, #20]
 8005eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f88 <_vfiprintf_r+0x22c>
 8005eb6:	7821      	ldrb	r1, [r4, #0]
 8005eb8:	2203      	movs	r2, #3
 8005eba:	4650      	mov	r0, sl
 8005ebc:	f7fa f9b0 	bl	8000220 <memchr>
 8005ec0:	b138      	cbz	r0, 8005ed2 <_vfiprintf_r+0x176>
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	eba0 000a 	sub.w	r0, r0, sl
 8005ec8:	2240      	movs	r2, #64	@ 0x40
 8005eca:	4082      	lsls	r2, r0
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	3401      	adds	r4, #1
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed6:	4829      	ldr	r0, [pc, #164]	@ (8005f7c <_vfiprintf_r+0x220>)
 8005ed8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005edc:	2206      	movs	r2, #6
 8005ede:	f7fa f99f 	bl	8000220 <memchr>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d03f      	beq.n	8005f66 <_vfiprintf_r+0x20a>
 8005ee6:	4b26      	ldr	r3, [pc, #152]	@ (8005f80 <_vfiprintf_r+0x224>)
 8005ee8:	bb1b      	cbnz	r3, 8005f32 <_vfiprintf_r+0x1d6>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	3307      	adds	r3, #7
 8005eee:	f023 0307 	bic.w	r3, r3, #7
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	9303      	str	r3, [sp, #12]
 8005ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef8:	443b      	add	r3, r7
 8005efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efc:	e76a      	b.n	8005dd4 <_vfiprintf_r+0x78>
 8005efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f02:	460c      	mov	r4, r1
 8005f04:	2001      	movs	r0, #1
 8005f06:	e7a8      	b.n	8005e5a <_vfiprintf_r+0xfe>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	3401      	adds	r4, #1
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f04f 0c0a 	mov.w	ip, #10
 8005f14:	4620      	mov	r0, r4
 8005f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f1a:	3a30      	subs	r2, #48	@ 0x30
 8005f1c:	2a09      	cmp	r2, #9
 8005f1e:	d903      	bls.n	8005f28 <_vfiprintf_r+0x1cc>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0c6      	beq.n	8005eb2 <_vfiprintf_r+0x156>
 8005f24:	9105      	str	r1, [sp, #20]
 8005f26:	e7c4      	b.n	8005eb2 <_vfiprintf_r+0x156>
 8005f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e7f0      	b.n	8005f14 <_vfiprintf_r+0x1b8>
 8005f32:	ab03      	add	r3, sp, #12
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	462a      	mov	r2, r5
 8005f38:	4b12      	ldr	r3, [pc, #72]	@ (8005f84 <_vfiprintf_r+0x228>)
 8005f3a:	a904      	add	r1, sp, #16
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f3af 8000 	nop.w
 8005f42:	4607      	mov	r7, r0
 8005f44:	1c78      	adds	r0, r7, #1
 8005f46:	d1d6      	bne.n	8005ef6 <_vfiprintf_r+0x19a>
 8005f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f4a:	07d9      	lsls	r1, r3, #31
 8005f4c:	d405      	bmi.n	8005f5a <_vfiprintf_r+0x1fe>
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	059a      	lsls	r2, r3, #22
 8005f52:	d402      	bmi.n	8005f5a <_vfiprintf_r+0x1fe>
 8005f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f56:	f7ff f9a9 	bl	80052ac <__retarget_lock_release_recursive>
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	065b      	lsls	r3, r3, #25
 8005f5e:	f53f af1f 	bmi.w	8005da0 <_vfiprintf_r+0x44>
 8005f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f64:	e71e      	b.n	8005da4 <_vfiprintf_r+0x48>
 8005f66:	ab03      	add	r3, sp, #12
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <_vfiprintf_r+0x228>)
 8005f6e:	a904      	add	r1, sp, #16
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7ff fc81 	bl	8005878 <_printf_i>
 8005f76:	e7e4      	b.n	8005f42 <_vfiprintf_r+0x1e6>
 8005f78:	080063d3 	.word	0x080063d3
 8005f7c:	080063dd 	.word	0x080063dd
 8005f80:	00000000 	.word	0x00000000
 8005f84:	08005d39 	.word	0x08005d39
 8005f88:	080063d9 	.word	0x080063d9

08005f8c <__swbuf_r>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	460e      	mov	r6, r1
 8005f90:	4614      	mov	r4, r2
 8005f92:	4605      	mov	r5, r0
 8005f94:	b118      	cbz	r0, 8005f9e <__swbuf_r+0x12>
 8005f96:	6a03      	ldr	r3, [r0, #32]
 8005f98:	b90b      	cbnz	r3, 8005f9e <__swbuf_r+0x12>
 8005f9a:	f7ff f871 	bl	8005080 <__sinit>
 8005f9e:	69a3      	ldr	r3, [r4, #24]
 8005fa0:	60a3      	str	r3, [r4, #8]
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	071a      	lsls	r2, r3, #28
 8005fa6:	d501      	bpl.n	8005fac <__swbuf_r+0x20>
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	b943      	cbnz	r3, 8005fbe <__swbuf_r+0x32>
 8005fac:	4621      	mov	r1, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 f82a 	bl	8006008 <__swsetup_r>
 8005fb4:	b118      	cbz	r0, 8005fbe <__swbuf_r+0x32>
 8005fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8005fba:	4638      	mov	r0, r7
 8005fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	6922      	ldr	r2, [r4, #16]
 8005fc2:	1a98      	subs	r0, r3, r2
 8005fc4:	6963      	ldr	r3, [r4, #20]
 8005fc6:	b2f6      	uxtb	r6, r6
 8005fc8:	4283      	cmp	r3, r0
 8005fca:	4637      	mov	r7, r6
 8005fcc:	dc05      	bgt.n	8005fda <__swbuf_r+0x4e>
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f7ff fdf3 	bl	8005bbc <_fflush_r>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d1ed      	bne.n	8005fb6 <__swbuf_r+0x2a>
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	6022      	str	r2, [r4, #0]
 8005fe6:	701e      	strb	r6, [r3, #0]
 8005fe8:	6962      	ldr	r2, [r4, #20]
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d004      	beq.n	8005ffa <__swbuf_r+0x6e>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	07db      	lsls	r3, r3, #31
 8005ff4:	d5e1      	bpl.n	8005fba <__swbuf_r+0x2e>
 8005ff6:	2e0a      	cmp	r6, #10
 8005ff8:	d1df      	bne.n	8005fba <__swbuf_r+0x2e>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f7ff fddd 	bl	8005bbc <_fflush_r>
 8006002:	2800      	cmp	r0, #0
 8006004:	d0d9      	beq.n	8005fba <__swbuf_r+0x2e>
 8006006:	e7d6      	b.n	8005fb6 <__swbuf_r+0x2a>

08006008 <__swsetup_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4b29      	ldr	r3, [pc, #164]	@ (80060b0 <__swsetup_r+0xa8>)
 800600c:	4605      	mov	r5, r0
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	460c      	mov	r4, r1
 8006012:	b118      	cbz	r0, 800601c <__swsetup_r+0x14>
 8006014:	6a03      	ldr	r3, [r0, #32]
 8006016:	b90b      	cbnz	r3, 800601c <__swsetup_r+0x14>
 8006018:	f7ff f832 	bl	8005080 <__sinit>
 800601c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006020:	0719      	lsls	r1, r3, #28
 8006022:	d422      	bmi.n	800606a <__swsetup_r+0x62>
 8006024:	06da      	lsls	r2, r3, #27
 8006026:	d407      	bmi.n	8006038 <__swsetup_r+0x30>
 8006028:	2209      	movs	r2, #9
 800602a:	602a      	str	r2, [r5, #0]
 800602c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	e033      	b.n	80060a0 <__swsetup_r+0x98>
 8006038:	0758      	lsls	r0, r3, #29
 800603a:	d512      	bpl.n	8006062 <__swsetup_r+0x5a>
 800603c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800603e:	b141      	cbz	r1, 8006052 <__swsetup_r+0x4a>
 8006040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006044:	4299      	cmp	r1, r3
 8006046:	d002      	beq.n	800604e <__swsetup_r+0x46>
 8006048:	4628      	mov	r0, r5
 800604a:	f7ff f94f 	bl	80052ec <_free_r>
 800604e:	2300      	movs	r3, #0
 8006050:	6363      	str	r3, [r4, #52]	@ 0x34
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	2300      	movs	r3, #0
 800605c:	6063      	str	r3, [r4, #4]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	b94b      	cbnz	r3, 8006082 <__swsetup_r+0x7a>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006078:	d003      	beq.n	8006082 <__swsetup_r+0x7a>
 800607a:	4621      	mov	r1, r4
 800607c:	4628      	mov	r0, r5
 800607e:	f000 f88b 	bl	8006198 <__smakebuf_r>
 8006082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006086:	f013 0201 	ands.w	r2, r3, #1
 800608a:	d00a      	beq.n	80060a2 <__swsetup_r+0x9a>
 800608c:	2200      	movs	r2, #0
 800608e:	60a2      	str	r2, [r4, #8]
 8006090:	6962      	ldr	r2, [r4, #20]
 8006092:	4252      	negs	r2, r2
 8006094:	61a2      	str	r2, [r4, #24]
 8006096:	6922      	ldr	r2, [r4, #16]
 8006098:	b942      	cbnz	r2, 80060ac <__swsetup_r+0xa4>
 800609a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800609e:	d1c5      	bne.n	800602c <__swsetup_r+0x24>
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
 80060a2:	0799      	lsls	r1, r3, #30
 80060a4:	bf58      	it	pl
 80060a6:	6962      	ldrpl	r2, [r4, #20]
 80060a8:	60a2      	str	r2, [r4, #8]
 80060aa:	e7f4      	b.n	8006096 <__swsetup_r+0x8e>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e7f7      	b.n	80060a0 <__swsetup_r+0x98>
 80060b0:	2000001c 	.word	0x2000001c

080060b4 <_raise_r>:
 80060b4:	291f      	cmp	r1, #31
 80060b6:	b538      	push	{r3, r4, r5, lr}
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	d904      	bls.n	80060c8 <_raise_r+0x14>
 80060be:	2316      	movs	r3, #22
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	f04f 30ff 	mov.w	r0, #4294967295
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80060ca:	b112      	cbz	r2, 80060d2 <_raise_r+0x1e>
 80060cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060d0:	b94b      	cbnz	r3, 80060e6 <_raise_r+0x32>
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f830 	bl	8006138 <_getpid_r>
 80060d8:	4622      	mov	r2, r4
 80060da:	4601      	mov	r1, r0
 80060dc:	4628      	mov	r0, r5
 80060de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e2:	f000 b817 	b.w	8006114 <_kill_r>
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d00a      	beq.n	8006100 <_raise_r+0x4c>
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	d103      	bne.n	80060f6 <_raise_r+0x42>
 80060ee:	2316      	movs	r3, #22
 80060f0:	6003      	str	r3, [r0, #0]
 80060f2:	2001      	movs	r0, #1
 80060f4:	e7e7      	b.n	80060c6 <_raise_r+0x12>
 80060f6:	2100      	movs	r1, #0
 80060f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80060fc:	4620      	mov	r0, r4
 80060fe:	4798      	blx	r3
 8006100:	2000      	movs	r0, #0
 8006102:	e7e0      	b.n	80060c6 <_raise_r+0x12>

08006104 <raise>:
 8006104:	4b02      	ldr	r3, [pc, #8]	@ (8006110 <raise+0xc>)
 8006106:	4601      	mov	r1, r0
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	f7ff bfd3 	b.w	80060b4 <_raise_r>
 800610e:	bf00      	nop
 8006110:	2000001c 	.word	0x2000001c

08006114 <_kill_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	@ (8006134 <_kill_r+0x20>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f7fa fd83 	bl	8000c2c <_kill>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d102      	bne.n	8006130 <_kill_r+0x1c>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	b103      	cbz	r3, 8006130 <_kill_r+0x1c>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	200002b4 	.word	0x200002b4

08006138 <_getpid_r>:
 8006138:	f7fa bd70 	b.w	8000c1c <_getpid>

0800613c <_malloc_usable_size_r>:
 800613c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006140:	1f18      	subs	r0, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfbc      	itt	lt
 8006146:	580b      	ldrlt	r3, [r1, r0]
 8006148:	18c0      	addlt	r0, r0, r3
 800614a:	4770      	bx	lr

0800614c <__swhatbuf_r>:
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	460c      	mov	r4, r1
 8006150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006154:	2900      	cmp	r1, #0
 8006156:	b096      	sub	sp, #88	@ 0x58
 8006158:	4615      	mov	r5, r2
 800615a:	461e      	mov	r6, r3
 800615c:	da0d      	bge.n	800617a <__swhatbuf_r+0x2e>
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	bf14      	ite	ne
 800616a:	2340      	movne	r3, #64	@ 0x40
 800616c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006170:	2000      	movs	r0, #0
 8006172:	6031      	str	r1, [r6, #0]
 8006174:	602b      	str	r3, [r5, #0]
 8006176:	b016      	add	sp, #88	@ 0x58
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	466a      	mov	r2, sp
 800617c:	f000 f848 	bl	8006210 <_fstat_r>
 8006180:	2800      	cmp	r0, #0
 8006182:	dbec      	blt.n	800615e <__swhatbuf_r+0x12>
 8006184:	9901      	ldr	r1, [sp, #4]
 8006186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800618a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800618e:	4259      	negs	r1, r3
 8006190:	4159      	adcs	r1, r3
 8006192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006196:	e7eb      	b.n	8006170 <__swhatbuf_r+0x24>

08006198 <__smakebuf_r>:
 8006198:	898b      	ldrh	r3, [r1, #12]
 800619a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800619c:	079d      	lsls	r5, r3, #30
 800619e:	4606      	mov	r6, r0
 80061a0:	460c      	mov	r4, r1
 80061a2:	d507      	bpl.n	80061b4 <__smakebuf_r+0x1c>
 80061a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	2301      	movs	r3, #1
 80061ae:	6163      	str	r3, [r4, #20]
 80061b0:	b003      	add	sp, #12
 80061b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b4:	ab01      	add	r3, sp, #4
 80061b6:	466a      	mov	r2, sp
 80061b8:	f7ff ffc8 	bl	800614c <__swhatbuf_r>
 80061bc:	9f00      	ldr	r7, [sp, #0]
 80061be:	4605      	mov	r5, r0
 80061c0:	4639      	mov	r1, r7
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7ff f906 	bl	80053d4 <_malloc_r>
 80061c8:	b948      	cbnz	r0, 80061de <__smakebuf_r+0x46>
 80061ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ce:	059a      	lsls	r2, r3, #22
 80061d0:	d4ee      	bmi.n	80061b0 <__smakebuf_r+0x18>
 80061d2:	f023 0303 	bic.w	r3, r3, #3
 80061d6:	f043 0302 	orr.w	r3, r3, #2
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	e7e2      	b.n	80061a4 <__smakebuf_r+0xc>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	6020      	str	r0, [r4, #0]
 80061e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061ee:	b15b      	cbz	r3, 8006208 <__smakebuf_r+0x70>
 80061f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f4:	4630      	mov	r0, r6
 80061f6:	f000 f81d 	bl	8006234 <_isatty_r>
 80061fa:	b128      	cbz	r0, 8006208 <__smakebuf_r+0x70>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	431d      	orrs	r5, r3
 800620c:	81a5      	strh	r5, [r4, #12]
 800620e:	e7cf      	b.n	80061b0 <__smakebuf_r+0x18>

08006210 <_fstat_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d07      	ldr	r5, [pc, #28]	@ (8006230 <_fstat_r+0x20>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	4611      	mov	r1, r2
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	f7fa fd65 	bl	8000cec <_fstat>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d102      	bne.n	800622c <_fstat_r+0x1c>
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	b103      	cbz	r3, 800622c <_fstat_r+0x1c>
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	bf00      	nop
 8006230:	200002b4 	.word	0x200002b4

08006234 <_isatty_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d06      	ldr	r5, [pc, #24]	@ (8006250 <_isatty_r+0x1c>)
 8006238:	2300      	movs	r3, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	f7fa fd64 	bl	8000d0c <_isatty>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_isatty_r+0x1a>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_isatty_r+0x1a>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	200002b4 	.word	0x200002b4

08006254 <_init>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr

08006260 <_fini>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	bf00      	nop
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr
